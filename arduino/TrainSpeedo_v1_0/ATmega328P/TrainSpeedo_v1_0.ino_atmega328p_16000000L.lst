
/var/folders/gq/82mf1qb17h323c49nscgmssc0000gp/T/arduino_build_4961/TrainSpeedo_v1_0.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__ctors_end>
       4:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       8:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      10:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      14:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      24:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      28:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      2c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      30:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      34:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      38:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      3c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      40:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__vector_16>
      44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      48:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <__vector_18>
      4c:	0c 94 a1 0d 	jmp	0x1b42	; 0x1b42 <__vector_19>
      50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      54:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      58:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      5c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      60:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      64:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	00 00       	nop
      6a:	00 09       	sbc	r16, r0
      6c:	00 03       	mulsu	r16, r16
      6e:	02 00       	.word	0x0002	; ????
      70:	00 04       	cpc	r0, r0
      72:	05 08       	sbc	r0, r5
	...

0000007f <digital_pin_to_bit_mask_PGM>:
      7f:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8f:	04 08 10 20 40 80 40                                ... @.@

00000096 <digital_pin_to_port_PGM>:
      96:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a6:	03 03 03 03 02 02 03                                .......

000000ad <port_to_input_PGM>:
      ad:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000b7 <port_to_output_PGM>:
      b7:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000c1 <port_to_mode_PGM>:
      c1:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000cc <__ctors_start>:
__ctors_start():
      cc:	05 09       	sbc	r16, r5
      ce:	d1 0d       	add	r29, r1

000000d0 <__ctors_end>:
__dtors_end():
      d0:	11 24       	eor	r1, r1
      d2:	1f be       	out	0x3f, r1	; 63
      d4:	cf ef       	ldi	r28, 0xFF	; 255
      d6:	d8 e0       	ldi	r29, 0x08	; 8
      d8:	de bf       	out	0x3e, r29	; 62
      da:	cd bf       	out	0x3d, r28	; 61

000000dc <__do_copy_data>:
__do_copy_data():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      dc:	16 e0       	ldi	r17, 0x06	; 6
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      de:	a0 e0       	ldi	r26, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      e0:	b1 e0       	ldi	r27, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      e2:	ee e7       	ldi	r30, 0x7E	; 126
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      e4:	f2 e2       	ldi	r31, 0x22	; 34
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      e8:	05 90       	lpm	r0, Z+
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      ea:	0d 92       	st	X+, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      ec:	ae 36       	cpi	r26, 0x6E	; 110
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      ee:	b1 07       	cpc	r27, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0xc>

000000f2 <__do_clear_bss>:
__do_clear_bss():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      f2:	27 e0       	ldi	r18, 0x07	; 7
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      f4:	ae e6       	ldi	r26, 0x6E	; 110
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      f6:	b6 e0       	ldi	r27, 0x06	; 6
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      fc:	a7 34       	cpi	r26, 0x47	; 71
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      fe:	b2 07       	cpc	r27, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>

00000102 <__do_global_ctors>:
__do_global_ctors():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     102:	10 e0       	ldi	r17, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     104:	c8 e6       	ldi	r28, 0x68	; 104
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     106:	d0 e0       	ldi	r29, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     108:	04 c0       	rjmp	.+8      	; 0x112 <__do_global_ctors+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     10a:	21 97       	sbiw	r28, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     10c:	fe 01       	movw	r30, r28
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     10e:	0e 94 07 11 	call	0x220e	; 0x220e <__tablejump2__>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     112:	c6 36       	cpi	r28, 0x66	; 102
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     114:	d1 07       	cpc	r29, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     116:	c9 f7       	brne	.-14     	; 0x10a <__do_global_ctors+0x8>
     118:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <main>
     11c:	0c 94 3d 11 	jmp	0x227a	; 0x227a <_exit>

00000120 <__bad_interrupt>:
__vector_22():
     120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <Print::write(char const*)>:
_ZN5Print5writeEPKc():
/Users/Tom/Documents/Arduino/Projekte/TrainSpeedo/Arduino/TrainSpeedo_v1_0/TrainSpeedo_v1_0.ino:499
/////////////////////////////////////////////////////////////////////////////////
//  DoNothing
/////////////////////////////////////////////////////////////////////////////////
void DoNothing()
{ /// absolutely NUTTIN'
}
     124:	61 15       	cp	r22, r1
     126:	71 05       	cpc	r23, r1
     128:	79 f0       	breq	.+30     	; 0x148 <Print::write(char const*)+0x24>
     12a:	fb 01       	movw	r30, r22
     12c:	01 90       	ld	r0, Z+
     12e:	00 20       	and	r0, r0
     130:	e9 f7       	brne	.-6      	; 0x12c <Print::write(char const*)+0x8>
     132:	31 97       	sbiw	r30, 0x01	; 1
     134:	af 01       	movw	r20, r30
     136:	46 1b       	sub	r20, r22
     138:	57 0b       	sbc	r21, r23
     13a:	dc 01       	movw	r26, r24
     13c:	ed 91       	ld	r30, X+
     13e:	fc 91       	ld	r31, X
     140:	02 80       	ldd	r0, Z+2	; 0x02
     142:	f3 81       	ldd	r31, Z+3	; 0x03
     144:	e0 2d       	mov	r30, r0
     146:	09 94       	ijmp
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	08 95       	ret

0000014e <setup>:
setup():
     14e:	61 e0       	ldi	r22, 0x01	; 1
     150:	8d e0       	ldi	r24, 0x0D	; 13
     152:	0e 94 b1 0b 	call	0x1762	; 0x1762 <pinMode>
     156:	61 e0       	ldi	r22, 0x01	; 1
     158:	80 e1       	ldi	r24, 0x10	; 16
     15a:	0e 94 b1 0b 	call	0x1762	; 0x1762 <pinMode>
     15e:	61 e0       	ldi	r22, 0x01	; 1
     160:	81 e1       	ldi	r24, 0x11	; 17
     162:	0e 94 b1 0b 	call	0x1762	; 0x1762 <pinMode>
     166:	61 e0       	ldi	r22, 0x01	; 1
     168:	82 e1       	ldi	r24, 0x12	; 18
     16a:	0e 94 b1 0b 	call	0x1762	; 0x1762 <pinMode>
     16e:	61 e0       	ldi	r22, 0x01	; 1
     170:	83 e1       	ldi	r24, 0x13	; 19
     172:	0e 94 b1 0b 	call	0x1762	; 0x1762 <pinMode>
     176:	61 e0       	ldi	r22, 0x01	; 1
     178:	8d e0       	ldi	r24, 0x0D	; 13
     17a:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
_ZN14HardwareSerial5beginEm():
     17e:	26 e0       	ldi	r18, 0x06	; 6
     180:	40 e8       	ldi	r20, 0x80	; 128
     182:	55 e2       	ldi	r21, 0x25	; 37
     184:	60 e0       	ldi	r22, 0x00	; 0
     186:	70 e0       	ldi	r23, 0x00	; 0
     188:	8a ea       	ldi	r24, 0xAA	; 170
     18a:	96 e0       	ldi	r25, 0x06	; 6
     18c:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
     190:	6a e0       	ldi	r22, 0x0A	; 10
     192:	71 e0       	ldi	r23, 0x01	; 1
     194:	8a ea       	ldi	r24, 0xAA	; 170
     196:	96 e0       	ldi	r25, 0x06	; 6
     198:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     19c:	67 e1       	ldi	r22, 0x17	; 23
     19e:	71 e0       	ldi	r23, 0x01	; 1
     1a0:	8a ea       	ldi	r24, 0xAA	; 170
     1a2:	96 e0       	ldi	r25, 0x06	; 6
     1a4:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Print::print(char const*)>
     1a8:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <Version>
     1ac:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <Version+0x1>
     1b0:	4a e0       	ldi	r20, 0x0A	; 10
     1b2:	50 e0       	ldi	r21, 0x00	; 0
     1b4:	8a ea       	ldi	r24, 0xAA	; 170
     1b6:	96 e0       	ldi	r25, 0x06	; 6
     1b8:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Print::println(int, int)>
     1bc:	63 e2       	ldi	r22, 0x23	; 35
     1be:	71 e0       	ldi	r23, 0x01	; 1
     1c0:	8a ea       	ldi	r24, 0xAA	; 170
     1c2:	96 e0       	ldi	r25, 0x06	; 6
     1c4:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     1c8:	60 e0       	ldi	r22, 0x00	; 0
     1ca:	8d e0       	ldi	r24, 0x0D	; 13
     1cc:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     1d0:	20 e0       	ldi	r18, 0x00	; 0
     1d2:	42 e0       	ldi	r20, 0x02	; 2
     1d4:	60 e1       	ldi	r22, 0x10	; 16
     1d6:	8e e6       	ldi	r24, 0x6E	; 110
     1d8:	96 e0       	ldi	r25, 0x06	; 6
     1da:	0e 94 df 09 	call	0x13be	; 0x13be <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>
     1de:	8e e6       	ldi	r24, 0x6E	; 110
     1e0:	96 e0       	ldi	r25, 0x06	; 6
     1e2:	0e 94 d7 09 	call	0x13ae	; 0x13ae <LiquidCrystal::display()>
     1e6:	8e e6       	ldi	r24, 0x6E	; 110
     1e8:	96 e0       	ldi	r25, 0x06	; 6
     1ea:	0e 94 bf 09 	call	0x137e	; 0x137e <LiquidCrystal::clear()>
     1ee:	61 e0       	ldi	r22, 0x01	; 1
     1f0:	8d e0       	ldi	r24, 0x0D	; 13
     1f2:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     1f6:	8e e6       	ldi	r24, 0x6E	; 110
     1f8:	96 e0       	ldi	r25, 0x06	; 6
     1fa:	0e 94 bf 09 	call	0x137e	; 0x137e <LiquidCrystal::clear()>
     1fe:	6d e2       	ldi	r22, 0x2D	; 45
     200:	71 e0       	ldi	r23, 0x01	; 1
     202:	8e e6       	ldi	r24, 0x6E	; 110
     204:	96 e0       	ldi	r25, 0x06	; 6
     206:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Print::print(char const*)>
     20a:	68 ee       	ldi	r22, 0xE8	; 232
     20c:	73 e0       	ldi	r23, 0x03	; 3
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	0e 94 1c 0b 	call	0x1638	; 0x1638 <delay>
     216:	6a e3       	ldi	r22, 0x3A	; 58
     218:	71 e0       	ldi	r23, 0x01	; 1
     21a:	8a ea       	ldi	r24, 0xAA	; 170
     21c:	96 e0       	ldi	r25, 0x06	; 6
     21e:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
_ZNK5EERefdeEv():
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	0e 94 27 11 	call	0x224e	; 0x224e <eeprom_read_byte>
setup():
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <Length+0x1>
     230:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Length>
     234:	6f e4       	ldi	r22, 0x4F	; 79
     236:	71 e0       	ldi	r23, 0x01	; 1
     238:	8a ea       	ldi	r24, 0xAA	; 170
     23a:	96 e0       	ldi	r25, 0x06	; 6
     23c:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Print::print(char const*)>
     240:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <Length>
     244:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <Length+0x1>
     248:	4a e0       	ldi	r20, 0x0A	; 10
     24a:	50 e0       	ldi	r21, 0x00	; 0
     24c:	8a ea       	ldi	r24, 0xAA	; 170
     24e:	96 e0       	ldi	r25, 0x06	; 6
     250:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Print::println(int, int)>
_ZNK5EERefdeEv():
     254:	82 e0       	ldi	r24, 0x02	; 2
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	0e 94 27 11 	call	0x224e	; 0x224e <eeprom_read_byte>
setup():
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <Scale+0x1>
     262:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Scale>
     266:	6f e6       	ldi	r22, 0x6F	; 111
     268:	71 e0       	ldi	r23, 0x01	; 1
     26a:	8a ea       	ldi	r24, 0xAA	; 170
     26c:	96 e0       	ldi	r25, 0x06	; 6
     26e:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Print::print(char const*)>
     272:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <Scale>
     276:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <Scale+0x1>
     27a:	4a e0       	ldi	r20, 0x0A	; 10
     27c:	50 e0       	ldi	r21, 0x00	; 0
     27e:	8a ea       	ldi	r24, 0xAA	; 170
     280:	96 e0       	ldi	r25, 0x06	; 6
     282:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Print::println(int, int)>
     286:	64 e8       	ldi	r22, 0x84	; 132
     288:	71 e0       	ldi	r23, 0x01	; 1
     28a:	8a ea       	ldi	r24, 0xAA	; 170
     28c:	96 e0       	ldi	r25, 0x06	; 6
     28e:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     292:	6f ea       	ldi	r22, 0xAF	; 175
     294:	71 e0       	ldi	r23, 0x01	; 1
     296:	8a ea       	ldi	r24, 0xAA	; 170
     298:	96 e0       	ldi	r25, 0x06	; 6
     29a:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     29e:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <Scale>
     2a2:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <Scale+0x1>
     2a6:	07 2e       	mov	r0, r23
     2a8:	00 0c       	add	r0, r0
     2aa:	88 0b       	sbc	r24, r24
     2ac:	99 0b       	sbc	r25, r25
     2ae:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__floatsisf>
     2b2:	26 e6       	ldi	r18, 0x66	; 102
     2b4:	36 e6       	ldi	r19, 0x66	; 102
     2b6:	46 e6       	ldi	r20, 0x66	; 102
     2b8:	50 e4       	ldi	r21, 0x40	; 64
     2ba:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__mulsf3>
     2be:	20 e0       	ldi	r18, 0x00	; 0
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	40 ea       	ldi	r20, 0xA0	; 160
     2c4:	51 e4       	ldi	r21, 0x41	; 65
     2c6:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__mulsf3>
     2ca:	20 e0       	ldi	r18, 0x00	; 0
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	48 e4       	ldi	r20, 0x48	; 72
     2d0:	53 e4       	ldi	r21, 0x43	; 67
     2d2:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__divsf3>
     2d6:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__fixunssfsi>
     2da:	60 93 8b 06 	sts	0x068B, r22	; 0x80068b <RealKmh>
     2de:	70 93 8c 06 	sts	0x068C, r23	; 0x80068c <RealKmh+0x1>
     2e2:	80 93 8d 06 	sts	0x068D, r24	; 0x80068d <RealKmh+0x2>
     2e6:	90 93 8e 06 	sts	0x068E, r25	; 0x80068e <RealKmh+0x3>
     2ea:	70 93 a0 06 	sts	0x06A0, r23	; 0x8006a0 <SpeedKmh+0x1>
     2ee:	60 93 9f 06 	sts	0x069F, r22	; 0x80069f <SpeedKmh>
     2f2:	6e ee       	ldi	r22, 0xEE	; 238
     2f4:	71 e0       	ldi	r23, 0x01	; 1
     2f6:	8a ea       	ldi	r24, 0xAA	; 170
     2f8:	96 e0       	ldi	r25, 0x06	; 6
     2fa:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Print::print(char const*)>
     2fe:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <Scale>
     302:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <Scale+0x1>
     306:	4a e0       	ldi	r20, 0x0A	; 10
     308:	50 e0       	ldi	r21, 0x00	; 0
     30a:	8a ea       	ldi	r24, 0xAA	; 170
     30c:	96 e0       	ldi	r25, 0x06	; 6
     30e:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <Print::print(int, int)>
     312:	64 ef       	ldi	r22, 0xF4	; 244
     314:	71 e0       	ldi	r23, 0x01	; 1
     316:	8a ea       	ldi	r24, 0xAA	; 170
     318:	96 e0       	ldi	r25, 0x06	; 6
     31a:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     31e:	40 91 8b 06 	lds	r20, 0x068B	; 0x80068b <RealKmh>
     322:	50 91 8c 06 	lds	r21, 0x068C	; 0x80068c <RealKmh+0x1>
     326:	60 91 8d 06 	lds	r22, 0x068D	; 0x80068d <RealKmh+0x2>
     32a:	70 91 8e 06 	lds	r23, 0x068E	; 0x80068e <RealKmh+0x3>
     32e:	2a e0       	ldi	r18, 0x0A	; 10
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	8a ea       	ldi	r24, 0xAA	; 170
     334:	96 e0       	ldi	r25, 0x06	; 6
     336:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <Print::println(unsigned long, int)>
     33a:	60 91 9f 06 	lds	r22, 0x069F	; 0x80069f <SpeedKmh>
     33e:	70 91 a0 06 	lds	r23, 0x06A0	; 0x8006a0 <SpeedKmh+0x1>
     342:	4a e0       	ldi	r20, 0x0A	; 10
     344:	50 e0       	ldi	r21, 0x00	; 0
     346:	8a ea       	ldi	r24, 0xAA	; 170
     348:	96 e0       	ldi	r25, 0x06	; 6
     34a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Print::println(int, int)>
     34e:	8e e6       	ldi	r24, 0x6E	; 110
     350:	96 e0       	ldi	r25, 0x06	; 6
     352:	0e 94 bf 09 	call	0x137e	; 0x137e <LiquidCrystal::clear()>
     356:	6a e0       	ldi	r22, 0x0A	; 10
     358:	71 e0       	ldi	r23, 0x01	; 1
     35a:	8e e6       	ldi	r24, 0x6E	; 110
     35c:	96 e0       	ldi	r25, 0x06	; 6
     35e:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Print::print(char const*)>
     362:	64 ef       	ldi	r22, 0xF4	; 244
     364:	71 e0       	ldi	r23, 0x01	; 1
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	0e 94 1c 0b 	call	0x1638	; 0x1638 <delay>
     36e:	61 e0       	ldi	r22, 0x01	; 1
     370:	72 e0       	ldi	r23, 0x02	; 2
     372:	8a ea       	ldi	r24, 0xAA	; 170
     374:	96 e0       	ldi	r25, 0x06	; 6
     376:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     37a:	61 e0       	ldi	r22, 0x01	; 1
     37c:	87 e0       	ldi	r24, 0x07	; 7
     37e:	0e 94 b1 0b 	call	0x1762	; 0x1762 <pinMode>
     382:	61 e0       	ldi	r22, 0x01	; 1
     384:	88 e0       	ldi	r24, 0x08	; 8
     386:	0e 94 b1 0b 	call	0x1762	; 0x1762 <pinMode>
     38a:	61 e0       	ldi	r22, 0x01	; 1
     38c:	89 e0       	ldi	r24, 0x09	; 9
     38e:	0e 94 b1 0b 	call	0x1762	; 0x1762 <pinMode>
     392:	61 e0       	ldi	r22, 0x01	; 1
     394:	8a e0       	ldi	r24, 0x0A	; 10
     396:	0e 94 b1 0b 	call	0x1762	; 0x1762 <pinMode>
     39a:	61 e0       	ldi	r22, 0x01	; 1
     39c:	8b e0       	ldi	r24, 0x0B	; 11
     39e:	0e 94 b1 0b 	call	0x1762	; 0x1762 <pinMode>
     3a2:	61 e0       	ldi	r22, 0x01	; 1
     3a4:	8c e0       	ldi	r24, 0x0C	; 12
     3a6:	0e 94 b1 0b 	call	0x1762	; 0x1762 <pinMode>
     3aa:	69 e1       	ldi	r22, 0x19	; 25
     3ac:	72 e0       	ldi	r23, 0x02	; 2
     3ae:	8a ea       	ldi	r24, 0xAA	; 170
     3b0:	96 e0       	ldi	r25, 0x06	; 6
     3b2:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     3b6:	62 e0       	ldi	r22, 0x02	; 2
     3b8:	82 e0       	ldi	r24, 0x02	; 2
     3ba:	0e 94 b1 0b 	call	0x1762	; 0x1762 <pinMode>
     3be:	62 e0       	ldi	r22, 0x02	; 2
     3c0:	83 e0       	ldi	r24, 0x03	; 3
     3c2:	0e 94 b1 0b 	call	0x1762	; 0x1762 <pinMode>
     3c6:	62 e0       	ldi	r22, 0x02	; 2
     3c8:	84 e0       	ldi	r24, 0x04	; 4
     3ca:	0e 94 b1 0b 	call	0x1762	; 0x1762 <pinMode>
     3ce:	62 e0       	ldi	r22, 0x02	; 2
     3d0:	85 e0       	ldi	r24, 0x05	; 5
     3d2:	0e 94 b1 0b 	call	0x1762	; 0x1762 <pinMode>
     3d6:	62 e0       	ldi	r22, 0x02	; 2
     3d8:	86 e0       	ldi	r24, 0x06	; 6
     3da:	0e 94 b1 0b 	call	0x1762	; 0x1762 <pinMode>
     3de:	62 e0       	ldi	r22, 0x02	; 2
     3e0:	8e e0       	ldi	r24, 0x0E	; 14
     3e2:	0e 94 b1 0b 	call	0x1762	; 0x1762 <pinMode>
     3e6:	62 e0       	ldi	r22, 0x02	; 2
     3e8:	8f e0       	ldi	r24, 0x0F	; 15
     3ea:	0e 94 b1 0b 	call	0x1762	; 0x1762 <pinMode>
     3ee:	69 e5       	ldi	r22, 0x59	; 89
     3f0:	72 e0       	ldi	r23, 0x02	; 2
     3f2:	8a ea       	ldi	r24, 0xAA	; 170
     3f4:	96 e0       	ldi	r25, 0x06	; 6
     3f6:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     3fa:	6e e6       	ldi	r22, 0x6E	; 110
     3fc:	72 e0       	ldi	r23, 0x02	; 2
     3fe:	8a ea       	ldi	r24, 0xAA	; 170
     400:	96 e0       	ldi	r25, 0x06	; 6
     402:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     406:	10 92 89 06 	sts	0x0689, r1	; 0x800689 <Armed>
     40a:	10 92 8a 06 	sts	0x068A, r1	; 0x80068a <Running>
     40e:	10 92 88 06 	sts	0x0688, r1	; 0x800688 <Sensor1On>
     412:	10 92 87 06 	sts	0x0687, r1	; 0x800687 <Sensor2On>
     416:	10 92 86 06 	sts	0x0686, r1	; 0x800686 <MenuMode>
     41a:	8e e6       	ldi	r24, 0x6E	; 110
     41c:	96 e0       	ldi	r25, 0x06	; 6
     41e:	0e 94 bf 09 	call	0x137e	; 0x137e <LiquidCrystal::clear()>
     422:	60 e8       	ldi	r22, 0x80	; 128
     424:	72 e0       	ldi	r23, 0x02	; 2
     426:	8e e6       	ldi	r24, 0x6E	; 110
     428:	96 e0       	ldi	r25, 0x06	; 6
     42a:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Print::print(char const*)>
     42e:	64 ef       	ldi	r22, 0xF4	; 244
     430:	71 e0       	ldi	r23, 0x01	; 1
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	0e 94 1c 0b 	call	0x1638	; 0x1638 <delay>
     43a:	60 e0       	ldi	r22, 0x00	; 0
     43c:	87 e0       	ldi	r24, 0x07	; 7
     43e:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	88 e0       	ldi	r24, 0x08	; 8
     446:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     44a:	60 e0       	ldi	r22, 0x00	; 0
     44c:	89 e0       	ldi	r24, 0x09	; 9
     44e:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     452:	60 e0       	ldi	r22, 0x00	; 0
     454:	8a e0       	ldi	r24, 0x0A	; 10
     456:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     45a:	61 e0       	ldi	r22, 0x01	; 1
     45c:	8d e0       	ldi	r24, 0x0D	; 13
     45e:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     462:	8e e6       	ldi	r24, 0x6E	; 110
     464:	96 e0       	ldi	r25, 0x06	; 6
     466:	0e 94 bf 09 	call	0x137e	; 0x137e <LiquidCrystal::clear()>
     46a:	40 e0       	ldi	r20, 0x00	; 0
     46c:	60 e0       	ldi	r22, 0x00	; 0
     46e:	8e e6       	ldi	r24, 0x6E	; 110
     470:	96 e0       	ldi	r25, 0x06	; 6
     472:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     476:	69 e8       	ldi	r22, 0x89	; 137
     478:	72 e0       	ldi	r23, 0x02	; 2
     47a:	8e e6       	ldi	r24, 0x6E	; 110
     47c:	96 e0       	ldi	r25, 0x06	; 6
     47e:	0e 94 92 00 	call	0x124	; 0x124 <Print::write(char const*)>
     482:	41 e0       	ldi	r20, 0x01	; 1
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	8e e6       	ldi	r24, 0x6E	; 110
     488:	96 e0       	ldi	r25, 0x06	; 6
     48a:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     48e:	66 e9       	ldi	r22, 0x96	; 150
     490:	72 e0       	ldi	r23, 0x02	; 2
     492:	8e e6       	ldi	r24, 0x6E	; 110
     494:	96 e0       	ldi	r25, 0x06	; 6
     496:	0e 94 92 00 	call	0x124	; 0x124 <Print::write(char const*)>
     49a:	66 ea       	ldi	r22, 0xA6	; 166
     49c:	72 e0       	ldi	r23, 0x02	; 2
     49e:	8a ea       	ldi	r24, 0xAA	; 170
     4a0:	96 e0       	ldi	r25, 0x06	; 6
     4a2:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     4a6:	68 eb       	ldi	r22, 0xB8	; 184
     4a8:	72 e0       	ldi	r23, 0x02	; 2
     4aa:	8a ea       	ldi	r24, 0xAA	; 170
     4ac:	96 e0       	ldi	r25, 0x06	; 6
     4ae:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <Print::println(char const*)>

000004b2 <ArmSystem()>:
_Z9ArmSystemv():
     4b2:	cf 93       	push	r28
     4b4:	66 ee       	ldi	r22, 0xE6	; 230
     4b6:	72 e0       	ldi	r23, 0x02	; 2
     4b8:	8a ea       	ldi	r24, 0xAA	; 170
     4ba:	96 e0       	ldi	r25, 0x06	; 6
     4bc:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     4c0:	64 ef       	ldi	r22, 0xF4	; 244
     4c2:	72 e0       	ldi	r23, 0x02	; 2
     4c4:	8a ea       	ldi	r24, 0xAA	; 170
     4c6:	96 e0       	ldi	r25, 0x06	; 6
     4c8:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     4cc:	10 92 9e 06 	sts	0x069E, r1	; 0x80069e <Trigger_RL+0x1>
     4d0:	10 92 9d 06 	sts	0x069D, r1	; 0x80069d <Trigger_RL>
     4d4:	c1 e0       	ldi	r28, 0x01	; 1
     4d6:	c0 93 89 06 	sts	0x0689, r28	; 0x800689 <Armed>
     4da:	10 92 8a 06 	sts	0x068A, r1	; 0x80068a <Running>
     4de:	61 e0       	ldi	r22, 0x01	; 1
     4e0:	73 e0       	ldi	r23, 0x03	; 3
     4e2:	8a ea       	ldi	r24, 0xAA	; 170
     4e4:	96 e0       	ldi	r25, 0x06	; 6
     4e6:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     4ea:	61 e0       	ldi	r22, 0x01	; 1
     4ec:	89 e0       	ldi	r24, 0x09	; 9
     4ee:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     4f2:	61 e0       	ldi	r22, 0x01	; 1
     4f4:	8a e0       	ldi	r24, 0x0A	; 10
     4f6:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     4fa:	61 e1       	ldi	r22, 0x11	; 17
     4fc:	73 e0       	ldi	r23, 0x03	; 3
     4fe:	8a ea       	ldi	r24, 0xAA	; 170
     500:	96 e0       	ldi	r25, 0x06	; 6
     502:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     506:	61 e0       	ldi	r22, 0x01	; 1
     508:	8d e0       	ldi	r24, 0x0D	; 13
     50a:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     50e:	61 e0       	ldi	r22, 0x01	; 1
     510:	87 e0       	ldi	r24, 0x07	; 7
     512:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     516:	60 e0       	ldi	r22, 0x00	; 0
     518:	88 e0       	ldi	r24, 0x08	; 8
     51a:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     51e:	65 e2       	ldi	r22, 0x25	; 37
     520:	73 e0       	ldi	r23, 0x03	; 3
     522:	8a ea       	ldi	r24, 0xAA	; 170
     524:	96 e0       	ldi	r25, 0x06	; 6
     526:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     52a:	c0 93 88 06 	sts	0x0688, r28	; 0x800688 <Sensor1On>
     52e:	c0 93 87 06 	sts	0x0687, r28	; 0x800687 <Sensor2On>
     532:	10 92 97 06 	sts	0x0697, r1	; 0x800697 <Start>
     536:	10 92 98 06 	sts	0x0698, r1	; 0x800698 <Start+0x1>
     53a:	10 92 99 06 	sts	0x0699, r1	; 0x800699 <Start+0x2>
     53e:	10 92 9a 06 	sts	0x069A, r1	; 0x80069a <Start+0x3>
     542:	10 92 93 06 	sts	0x0693, r1	; 0x800693 <Finish>
     546:	10 92 94 06 	sts	0x0694, r1	; 0x800694 <Finish+0x1>
     54a:	10 92 95 06 	sts	0x0695, r1	; 0x800695 <Finish+0x2>
     54e:	10 92 96 06 	sts	0x0696, r1	; 0x800696 <Finish+0x3>
     552:	10 92 8f 06 	sts	0x068F, r1	; 0x80068f <Delta>
     556:	10 92 90 06 	sts	0x0690, r1	; 0x800690 <Delta+0x1>
     55a:	10 92 91 06 	sts	0x0691, r1	; 0x800691 <Delta+0x2>
     55e:	10 92 92 06 	sts	0x0692, r1	; 0x800692 <Delta+0x3>
     562:	8e e6       	ldi	r24, 0x6E	; 110
     564:	96 e0       	ldi	r25, 0x06	; 6
     566:	0e 94 bf 09 	call	0x137e	; 0x137e <LiquidCrystal::clear()>
     56a:	40 e0       	ldi	r20, 0x00	; 0
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	8e e6       	ldi	r24, 0x6E	; 110
     570:	96 e0       	ldi	r25, 0x06	; 6
     572:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     576:	65 e3       	ldi	r22, 0x35	; 53
     578:	73 e0       	ldi	r23, 0x03	; 3
     57a:	8e e6       	ldi	r24, 0x6E	; 110
     57c:	96 e0       	ldi	r25, 0x06	; 6
     57e:	0e 94 92 00 	call	0x124	; 0x124 <Print::write(char const*)>
     582:	41 e0       	ldi	r20, 0x01	; 1
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	8e e6       	ldi	r24, 0x6E	; 110
     588:	96 e0       	ldi	r25, 0x06	; 6
     58a:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     58e:	65 e4       	ldi	r22, 0x45	; 69
     590:	73 e0       	ldi	r23, 0x03	; 3
     592:	8e e6       	ldi	r24, 0x6E	; 110
     594:	96 e0       	ldi	r25, 0x06	; 6
     596:	cf 91       	pop	r28
     598:	0c 94 92 00 	jmp	0x124	; 0x124 <Print::write(char const*)>

0000059c <ResetSystem()>:
_Z11ResetSystemv():
     59c:	65 e5       	ldi	r22, 0x55	; 85
     59e:	73 e0       	ldi	r23, 0x03	; 3
     5a0:	8a ea       	ldi	r24, 0xAA	; 170
     5a2:	96 e0       	ldi	r25, 0x06	; 6
     5a4:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     5a8:	61 e0       	ldi	r22, 0x01	; 1
     5aa:	8d e0       	ldi	r24, 0x0D	; 13
     5ac:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     5b0:	61 e0       	ldi	r22, 0x01	; 1
     5b2:	87 e0       	ldi	r24, 0x07	; 7
     5b4:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     5b8:	61 e0       	ldi	r22, 0x01	; 1
     5ba:	88 e0       	ldi	r24, 0x08	; 8
     5bc:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     5c0:	8e e6       	ldi	r24, 0x6E	; 110
     5c2:	96 e0       	ldi	r25, 0x06	; 6
     5c4:	0e 94 bf 09 	call	0x137e	; 0x137e <LiquidCrystal::clear()>
     5c8:	40 e0       	ldi	r20, 0x00	; 0
     5ca:	60 e0       	ldi	r22, 0x00	; 0
     5cc:	8e e6       	ldi	r24, 0x6E	; 110
     5ce:	96 e0       	ldi	r25, 0x06	; 6
     5d0:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     5d4:	62 e6       	ldi	r22, 0x62	; 98
     5d6:	73 e0       	ldi	r23, 0x03	; 3
     5d8:	8e e6       	ldi	r24, 0x6E	; 110
     5da:	96 e0       	ldi	r25, 0x06	; 6
     5dc:	0e 94 92 00 	call	0x124	; 0x124 <Print::write(char const*)>
     5e0:	41 e0       	ldi	r20, 0x01	; 1
     5e2:	60 e0       	ldi	r22, 0x00	; 0
     5e4:	8e e6       	ldi	r24, 0x6E	; 110
     5e6:	96 e0       	ldi	r25, 0x06	; 6
     5e8:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     5ec:	62 e7       	ldi	r22, 0x72	; 114
     5ee:	73 e0       	ldi	r23, 0x03	; 3
     5f0:	8e e6       	ldi	r24, 0x6E	; 110
     5f2:	96 e0       	ldi	r25, 0x06	; 6
     5f4:	0e 94 92 00 	call	0x124	; 0x124 <Print::write(char const*)>
     5f8:	10 92 9e 06 	sts	0x069E, r1	; 0x80069e <Trigger_RL+0x1>
     5fc:	10 92 9d 06 	sts	0x069D, r1	; 0x80069d <Trigger_RL>
     600:	10 92 89 06 	sts	0x0689, r1	; 0x800689 <Armed>
     604:	10 92 8a 06 	sts	0x068A, r1	; 0x80068a <Running>
     608:	62 e8       	ldi	r22, 0x82	; 130
     60a:	73 e0       	ldi	r23, 0x03	; 3
     60c:	8a ea       	ldi	r24, 0xAA	; 170
     60e:	96 e0       	ldi	r25, 0x06	; 6
     610:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	89 e0       	ldi	r24, 0x09	; 9
     618:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     61c:	60 e0       	ldi	r22, 0x00	; 0
     61e:	8a e0       	ldi	r24, 0x0A	; 10
     620:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     624:	61 e1       	ldi	r22, 0x11	; 17
     626:	73 e0       	ldi	r23, 0x03	; 3
     628:	8a ea       	ldi	r24, 0xAA	; 170
     62a:	96 e0       	ldi	r25, 0x06	; 6
     62c:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     630:	65 e2       	ldi	r22, 0x25	; 37
     632:	73 e0       	ldi	r23, 0x03	; 3
     634:	8a ea       	ldi	r24, 0xAA	; 170
     636:	96 e0       	ldi	r25, 0x06	; 6
     638:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     63c:	10 92 88 06 	sts	0x0688, r1	; 0x800688 <Sensor1On>
     640:	10 92 87 06 	sts	0x0687, r1	; 0x800687 <Sensor2On>
     644:	10 92 97 06 	sts	0x0697, r1	; 0x800697 <Start>
     648:	10 92 98 06 	sts	0x0698, r1	; 0x800698 <Start+0x1>
     64c:	10 92 99 06 	sts	0x0699, r1	; 0x800699 <Start+0x2>
     650:	10 92 9a 06 	sts	0x069A, r1	; 0x80069a <Start+0x3>
     654:	10 92 93 06 	sts	0x0693, r1	; 0x800693 <Finish>
     658:	10 92 94 06 	sts	0x0694, r1	; 0x800694 <Finish+0x1>
     65c:	10 92 95 06 	sts	0x0695, r1	; 0x800695 <Finish+0x2>
     660:	10 92 96 06 	sts	0x0696, r1	; 0x800696 <Finish+0x3>
     664:	10 92 8f 06 	sts	0x068F, r1	; 0x80068f <Delta>
     668:	10 92 90 06 	sts	0x0690, r1	; 0x800690 <Delta+0x1>
     66c:	10 92 91 06 	sts	0x0691, r1	; 0x800691 <Delta+0x2>
     670:	10 92 92 06 	sts	0x0692, r1	; 0x800692 <Delta+0x3>
     674:	60 ed       	ldi	r22, 0xD0	; 208
     676:	77 e0       	ldi	r23, 0x07	; 7
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0e 94 1c 0b 	call	0x1638	; 0x1638 <delay>
     680:	8e e6       	ldi	r24, 0x6E	; 110
     682:	96 e0       	ldi	r25, 0x06	; 6
     684:	0e 94 bf 09 	call	0x137e	; 0x137e <LiquidCrystal::clear()>
     688:	40 e0       	ldi	r20, 0x00	; 0
     68a:	60 e0       	ldi	r22, 0x00	; 0
     68c:	8e e6       	ldi	r24, 0x6E	; 110
     68e:	96 e0       	ldi	r25, 0x06	; 6
     690:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     694:	69 e8       	ldi	r22, 0x89	; 137
     696:	72 e0       	ldi	r23, 0x02	; 2
     698:	8e e6       	ldi	r24, 0x6E	; 110
     69a:	96 e0       	ldi	r25, 0x06	; 6
     69c:	0e 94 92 00 	call	0x124	; 0x124 <Print::write(char const*)>
     6a0:	41 e0       	ldi	r20, 0x01	; 1
     6a2:	60 e0       	ldi	r22, 0x00	; 0
     6a4:	8e e6       	ldi	r24, 0x6E	; 110
     6a6:	96 e0       	ldi	r25, 0x06	; 6
     6a8:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     6ac:	66 e9       	ldi	r22, 0x96	; 150
     6ae:	72 e0       	ldi	r23, 0x02	; 2
     6b0:	8e e6       	ldi	r24, 0x6E	; 110
     6b2:	96 e0       	ldi	r25, 0x06	; 6
     6b4:	0e 94 92 00 	call	0x124	; 0x124 <Print::write(char const*)>
     6b8:	61 e0       	ldi	r22, 0x01	; 1
     6ba:	8d e0       	ldi	r24, 0x0D	; 13
     6bc:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     6c0:	60 e0       	ldi	r22, 0x00	; 0
     6c2:	87 e0       	ldi	r24, 0x07	; 7
     6c4:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     6c8:	60 e0       	ldi	r22, 0x00	; 0
     6ca:	88 e0       	ldi	r24, 0x08	; 8
     6cc:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     6d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     6d4:	08 95       	ret

000006d6 <LeftStart()>:
_Z9LeftStartv():
     6d6:	64 e9       	ldi	r22, 0x94	; 148
     6d8:	73 e0       	ldi	r23, 0x03	; 3
     6da:	8a ea       	ldi	r24, 0xAA	; 170
     6dc:	96 e0       	ldi	r25, 0x06	; 6
     6de:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     6e2:	62 ea       	ldi	r22, 0xA2	; 162
     6e4:	73 e0       	ldi	r23, 0x03	; 3
     6e6:	8a ea       	ldi	r24, 0xAA	; 170
     6e8:	96 e0       	ldi	r25, 0x06	; 6
     6ea:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	90 93 9e 06 	sts	0x069E, r25	; 0x80069e <Trigger_RL+0x1>
     6f6:	80 93 9d 06 	sts	0x069D, r24	; 0x80069d <Trigger_RL>
     6fa:	66 eb       	ldi	r22, 0xB6	; 182
     6fc:	73 e0       	ldi	r23, 0x03	; 3
     6fe:	8a ea       	ldi	r24, 0xAA	; 170
     700:	96 e0       	ldi	r25, 0x06	; 6
     702:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     706:	10 92 88 06 	sts	0x0688, r1	; 0x800688 <Sensor1On>
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	80 93 87 06 	sts	0x0687, r24	; 0x800687 <Sensor2On>
     710:	10 92 89 06 	sts	0x0689, r1	; 0x800689 <Armed>
     714:	80 93 8a 06 	sts	0x068A, r24	; 0x80068a <Running>
     718:	60 e0       	ldi	r22, 0x00	; 0
     71a:	87 e0       	ldi	r24, 0x07	; 7
     71c:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     720:	61 e0       	ldi	r22, 0x01	; 1
     722:	88 e0       	ldi	r24, 0x08	; 8
     724:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     728:	60 e0       	ldi	r22, 0x00	; 0
     72a:	89 e0       	ldi	r24, 0x09	; 9
     72c:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     730:	61 e0       	ldi	r22, 0x01	; 1
     732:	8a e0       	ldi	r24, 0x0A	; 10
     734:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     738:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <millis>
     73c:	60 93 97 06 	sts	0x0697, r22	; 0x800697 <Start>
     740:	70 93 98 06 	sts	0x0698, r23	; 0x800698 <Start+0x1>
     744:	80 93 99 06 	sts	0x0699, r24	; 0x800699 <Start+0x2>
     748:	90 93 9a 06 	sts	0x069A, r25	; 0x80069a <Start+0x3>
     74c:	10 92 93 06 	sts	0x0693, r1	; 0x800693 <Finish>
     750:	10 92 94 06 	sts	0x0694, r1	; 0x800694 <Finish+0x1>
     754:	10 92 95 06 	sts	0x0695, r1	; 0x800695 <Finish+0x2>
     758:	10 92 96 06 	sts	0x0696, r1	; 0x800696 <Finish+0x3>
     75c:	10 92 8f 06 	sts	0x068F, r1	; 0x80068f <Delta>
     760:	10 92 90 06 	sts	0x0690, r1	; 0x800690 <Delta+0x1>
     764:	10 92 91 06 	sts	0x0691, r1	; 0x800691 <Delta+0x2>
     768:	10 92 92 06 	sts	0x0692, r1	; 0x800692 <Delta+0x3>
     76c:	8e e6       	ldi	r24, 0x6E	; 110
     76e:	96 e0       	ldi	r25, 0x06	; 6
     770:	0e 94 bf 09 	call	0x137e	; 0x137e <LiquidCrystal::clear()>
     774:	40 e0       	ldi	r20, 0x00	; 0
     776:	60 e0       	ldi	r22, 0x00	; 0
     778:	8e e6       	ldi	r24, 0x6E	; 110
     77a:	96 e0       	ldi	r25, 0x06	; 6
     77c:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     780:	6e ec       	ldi	r22, 0xCE	; 206
     782:	73 e0       	ldi	r23, 0x03	; 3
     784:	8e e6       	ldi	r24, 0x6E	; 110
     786:	96 e0       	ldi	r25, 0x06	; 6
     788:	0e 94 92 00 	call	0x124	; 0x124 <Print::write(char const*)>
     78c:	41 e0       	ldi	r20, 0x01	; 1
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	8e e6       	ldi	r24, 0x6E	; 110
     792:	96 e0       	ldi	r25, 0x06	; 6
     794:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     798:	6b ed       	ldi	r22, 0xDB	; 219
     79a:	73 e0       	ldi	r23, 0x03	; 3
     79c:	8e e6       	ldi	r24, 0x6E	; 110
     79e:	96 e0       	ldi	r25, 0x06	; 6
     7a0:	0c 94 92 00 	jmp	0x124	; 0x124 <Print::write(char const*)>

000007a4 <RightStart()>:
_Z10RightStartv():
     7a4:	69 ee       	ldi	r22, 0xE9	; 233
     7a6:	73 e0       	ldi	r23, 0x03	; 3
     7a8:	8a ea       	ldi	r24, 0xAA	; 170
     7aa:	96 e0       	ldi	r25, 0x06	; 6
     7ac:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     7b0:	67 ef       	ldi	r22, 0xF7	; 247
     7b2:	73 e0       	ldi	r23, 0x03	; 3
     7b4:	8a ea       	ldi	r24, 0xAA	; 170
     7b6:	96 e0       	ldi	r25, 0x06	; 6
     7b8:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     7bc:	82 e0       	ldi	r24, 0x02	; 2
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	90 93 9e 06 	sts	0x069E, r25	; 0x80069e <Trigger_RL+0x1>
     7c4:	80 93 9d 06 	sts	0x069D, r24	; 0x80069d <Trigger_RL>
     7c8:	6c e0       	ldi	r22, 0x0C	; 12
     7ca:	74 e0       	ldi	r23, 0x04	; 4
     7cc:	8a ea       	ldi	r24, 0xAA	; 170
     7ce:	96 e0       	ldi	r25, 0x06	; 6
     7d0:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	80 93 88 06 	sts	0x0688, r24	; 0x800688 <Sensor1On>
     7da:	10 92 87 06 	sts	0x0687, r1	; 0x800687 <Sensor2On>
     7de:	10 92 89 06 	sts	0x0689, r1	; 0x800689 <Armed>
     7e2:	80 93 8a 06 	sts	0x068A, r24	; 0x80068a <Running>
     7e6:	60 e0       	ldi	r22, 0x00	; 0
     7e8:	87 e0       	ldi	r24, 0x07	; 7
     7ea:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     7ee:	61 e0       	ldi	r22, 0x01	; 1
     7f0:	88 e0       	ldi	r24, 0x08	; 8
     7f2:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	8a e0       	ldi	r24, 0x0A	; 10
     7fa:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     7fe:	61 e0       	ldi	r22, 0x01	; 1
     800:	89 e0       	ldi	r24, 0x09	; 9
     802:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     806:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <millis>
     80a:	60 93 97 06 	sts	0x0697, r22	; 0x800697 <Start>
     80e:	70 93 98 06 	sts	0x0698, r23	; 0x800698 <Start+0x1>
     812:	80 93 99 06 	sts	0x0699, r24	; 0x800699 <Start+0x2>
     816:	90 93 9a 06 	sts	0x069A, r25	; 0x80069a <Start+0x3>
     81a:	10 92 93 06 	sts	0x0693, r1	; 0x800693 <Finish>
     81e:	10 92 94 06 	sts	0x0694, r1	; 0x800694 <Finish+0x1>
     822:	10 92 95 06 	sts	0x0695, r1	; 0x800695 <Finish+0x2>
     826:	10 92 96 06 	sts	0x0696, r1	; 0x800696 <Finish+0x3>
     82a:	10 92 8f 06 	sts	0x068F, r1	; 0x80068f <Delta>
     82e:	10 92 90 06 	sts	0x0690, r1	; 0x800690 <Delta+0x1>
     832:	10 92 91 06 	sts	0x0691, r1	; 0x800691 <Delta+0x2>
     836:	10 92 92 06 	sts	0x0692, r1	; 0x800692 <Delta+0x3>
     83a:	8e e6       	ldi	r24, 0x6E	; 110
     83c:	96 e0       	ldi	r25, 0x06	; 6
     83e:	0e 94 bf 09 	call	0x137e	; 0x137e <LiquidCrystal::clear()>
     842:	40 e0       	ldi	r20, 0x00	; 0
     844:	60 e0       	ldi	r22, 0x00	; 0
     846:	8e e6       	ldi	r24, 0x6E	; 110
     848:	96 e0       	ldi	r25, 0x06	; 6
     84a:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     84e:	65 e2       	ldi	r22, 0x25	; 37
     850:	74 e0       	ldi	r23, 0x04	; 4
     852:	8e e6       	ldi	r24, 0x6E	; 110
     854:	96 e0       	ldi	r25, 0x06	; 6
     856:	0e 94 92 00 	call	0x124	; 0x124 <Print::write(char const*)>
     85a:	41 e0       	ldi	r20, 0x01	; 1
     85c:	60 e0       	ldi	r22, 0x00	; 0
     85e:	8e e6       	ldi	r24, 0x6E	; 110
     860:	96 e0       	ldi	r25, 0x06	; 6
     862:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     866:	6b ed       	ldi	r22, 0xDB	; 219
     868:	73 e0       	ldi	r23, 0x03	; 3
     86a:	8e e6       	ldi	r24, 0x6E	; 110
     86c:	96 e0       	ldi	r25, 0x06	; 6
     86e:	0c 94 92 00 	jmp	0x124	; 0x124 <Print::write(char const*)>

00000872 <CalculateSpeed()>:
_Z14CalculateSpeedv():
     872:	cf 92       	push	r12
     874:	df 92       	push	r13
     876:	ef 92       	push	r14
     878:	ff 92       	push	r15
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	60 e0       	ldi	r22, 0x00	; 0
     880:	8d e0       	ldi	r24, 0x0D	; 13
     882:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     886:	63 e3       	ldi	r22, 0x33	; 51
     888:	74 e0       	ldi	r23, 0x04	; 4
     88a:	8a ea       	ldi	r24, 0xAA	; 170
     88c:	96 e0       	ldi	r25, 0x06	; 6
     88e:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     892:	10 92 88 06 	sts	0x0688, r1	; 0x800688 <Sensor1On>
     896:	10 92 87 06 	sts	0x0687, r1	; 0x800687 <Sensor2On>
     89a:	6a e4       	ldi	r22, 0x4A	; 74
     89c:	74 e0       	ldi	r23, 0x04	; 4
     89e:	8a ea       	ldi	r24, 0xAA	; 170
     8a0:	96 e0       	ldi	r25, 0x06	; 6
     8a2:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     8a6:	10 92 9e 06 	sts	0x069E, r1	; 0x80069e <Trigger_RL+0x1>
     8aa:	10 92 9d 06 	sts	0x069D, r1	; 0x80069d <Trigger_RL>
     8ae:	10 92 89 06 	sts	0x0689, r1	; 0x800689 <Armed>
     8b2:	10 92 8a 06 	sts	0x068A, r1	; 0x80068a <Running>
     8b6:	60 e0       	ldi	r22, 0x00	; 0
     8b8:	87 e0       	ldi	r24, 0x07	; 7
     8ba:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	88 e0       	ldi	r24, 0x08	; 8
     8c2:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	89 e0       	ldi	r24, 0x09	; 9
     8ca:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     8ce:	60 e0       	ldi	r22, 0x00	; 0
     8d0:	8a e0       	ldi	r24, 0x0A	; 10
     8d2:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
     8d6:	63 e6       	ldi	r22, 0x63	; 99
     8d8:	74 e0       	ldi	r23, 0x04	; 4
     8da:	8a ea       	ldi	r24, 0xAA	; 170
     8dc:	96 e0       	ldi	r25, 0x06	; 6
     8de:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     8e2:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <Finish>
     8e6:	90 91 94 06 	lds	r25, 0x0694	; 0x800694 <Finish+0x1>
     8ea:	a0 91 95 06 	lds	r26, 0x0695	; 0x800695 <Finish+0x2>
     8ee:	b0 91 96 06 	lds	r27, 0x0696	; 0x800696 <Finish+0x3>
     8f2:	40 91 97 06 	lds	r20, 0x0697	; 0x800697 <Start>
     8f6:	50 91 98 06 	lds	r21, 0x0698	; 0x800698 <Start+0x1>
     8fa:	60 91 99 06 	lds	r22, 0x0699	; 0x800699 <Start+0x2>
     8fe:	70 91 9a 06 	lds	r23, 0x069A	; 0x80069a <Start+0x3>
     902:	84 1b       	sub	r24, r20
     904:	95 0b       	sbc	r25, r21
     906:	a6 0b       	sbc	r26, r22
     908:	b7 0b       	sbc	r27, r23
     90a:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <Delta>
     90e:	90 93 90 06 	sts	0x0690, r25	; 0x800690 <Delta+0x1>
     912:	a0 93 91 06 	sts	0x0691, r26	; 0x800691 <Delta+0x2>
     916:	b0 93 92 06 	sts	0x0692, r27	; 0x800692 <Delta+0x3>
     91a:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <Length>
     91e:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <Length+0x1>
     922:	c8 e6       	ldi	r28, 0x68	; 104
     924:	d1 e0       	ldi	r29, 0x01	; 1
     926:	2c 9f       	mul	r18, r28
     928:	c0 01       	movw	r24, r0
     92a:	2d 9f       	mul	r18, r29
     92c:	90 0d       	add	r25, r0
     92e:	3c 9f       	mul	r19, r28
     930:	90 0d       	add	r25, r0
     932:	11 24       	eor	r1, r1
     934:	09 2e       	mov	r0, r25
     936:	00 0c       	add	r0, r0
     938:	aa 0b       	sbc	r26, r26
     93a:	bb 0b       	sbc	r27, r27
     93c:	80 93 8b 06 	sts	0x068B, r24	; 0x80068b <RealKmh>
     940:	90 93 8c 06 	sts	0x068C, r25	; 0x80068c <RealKmh+0x1>
     944:	a0 93 8d 06 	sts	0x068D, r26	; 0x80068d <RealKmh+0x2>
     948:	b0 93 8e 06 	sts	0x068E, r27	; 0x80068e <RealKmh+0x3>
     94c:	6f e6       	ldi	r22, 0x6F	; 111
     94e:	74 e0       	ldi	r23, 0x04	; 4
     950:	8a ea       	ldi	r24, 0xAA	; 170
     952:	96 e0       	ldi	r25, 0x06	; 6
     954:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Print::print(char const*)>
     958:	40 91 8b 06 	lds	r20, 0x068B	; 0x80068b <RealKmh>
     95c:	50 91 8c 06 	lds	r21, 0x068C	; 0x80068c <RealKmh+0x1>
     960:	60 91 8d 06 	lds	r22, 0x068D	; 0x80068d <RealKmh+0x2>
     964:	70 91 8e 06 	lds	r23, 0x068E	; 0x80068e <RealKmh+0x3>
     968:	2a e0       	ldi	r18, 0x0A	; 10
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	8a ea       	ldi	r24, 0xAA	; 170
     96e:	96 e0       	ldi	r25, 0x06	; 6
     970:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <Print::println(unsigned long, int)>
     974:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <Scale>
     978:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <Scale+0x1>
     97c:	20 91 8b 06 	lds	r18, 0x068B	; 0x80068b <RealKmh>
     980:	30 91 8c 06 	lds	r19, 0x068C	; 0x80068c <RealKmh+0x1>
     984:	40 91 8d 06 	lds	r20, 0x068D	; 0x80068d <RealKmh+0x2>
     988:	50 91 8e 06 	lds	r21, 0x068E	; 0x80068e <RealKmh+0x3>
     98c:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__mulshisi3>
     990:	60 93 8b 06 	sts	0x068B, r22	; 0x80068b <RealKmh>
     994:	70 93 8c 06 	sts	0x068C, r23	; 0x80068c <RealKmh+0x1>
     998:	80 93 8d 06 	sts	0x068D, r24	; 0x80068d <RealKmh+0x2>
     99c:	90 93 8e 06 	sts	0x068E, r25	; 0x80068e <RealKmh+0x3>
     9a0:	6a e8       	ldi	r22, 0x8A	; 138
     9a2:	74 e0       	ldi	r23, 0x04	; 4
     9a4:	8a ea       	ldi	r24, 0xAA	; 170
     9a6:	96 e0       	ldi	r25, 0x06	; 6
     9a8:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Print::print(char const*)>
     9ac:	40 91 8b 06 	lds	r20, 0x068B	; 0x80068b <RealKmh>
     9b0:	50 91 8c 06 	lds	r21, 0x068C	; 0x80068c <RealKmh+0x1>
     9b4:	60 91 8d 06 	lds	r22, 0x068D	; 0x80068d <RealKmh+0x2>
     9b8:	70 91 8e 06 	lds	r23, 0x068E	; 0x80068e <RealKmh+0x3>
     9bc:	2a e0       	ldi	r18, 0x0A	; 10
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	8a ea       	ldi	r24, 0xAA	; 170
     9c2:	96 e0       	ldi	r25, 0x06	; 6
     9c4:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <Print::println(unsigned long, int)>
     9c8:	60 91 8b 06 	lds	r22, 0x068B	; 0x80068b <RealKmh>
     9cc:	70 91 8c 06 	lds	r23, 0x068C	; 0x80068c <RealKmh+0x1>
     9d0:	80 91 8d 06 	lds	r24, 0x068D	; 0x80068d <RealKmh+0x2>
     9d4:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <RealKmh+0x3>
     9d8:	20 91 8f 06 	lds	r18, 0x068F	; 0x80068f <Delta>
     9dc:	30 91 90 06 	lds	r19, 0x0690	; 0x800690 <Delta+0x1>
     9e0:	40 91 91 06 	lds	r20, 0x0691	; 0x800691 <Delta+0x2>
     9e4:	50 91 92 06 	lds	r21, 0x0692	; 0x800692 <Delta+0x3>
     9e8:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__udivmodsi4>
     9ec:	20 93 8b 06 	sts	0x068B, r18	; 0x80068b <RealKmh>
     9f0:	30 93 8c 06 	sts	0x068C, r19	; 0x80068c <RealKmh+0x1>
     9f4:	40 93 8d 06 	sts	0x068D, r20	; 0x80068d <RealKmh+0x2>
     9f8:	50 93 8e 06 	sts	0x068E, r21	; 0x80068e <RealKmh+0x3>
     9fc:	65 ea       	ldi	r22, 0xA5	; 165
     9fe:	74 e0       	ldi	r23, 0x04	; 4
     a00:	8a ea       	ldi	r24, 0xAA	; 170
     a02:	96 e0       	ldi	r25, 0x06	; 6
     a04:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Print::print(char const*)>
     a08:	40 91 8b 06 	lds	r20, 0x068B	; 0x80068b <RealKmh>
     a0c:	50 91 8c 06 	lds	r21, 0x068C	; 0x80068c <RealKmh+0x1>
     a10:	60 91 8d 06 	lds	r22, 0x068D	; 0x80068d <RealKmh+0x2>
     a14:	70 91 8e 06 	lds	r23, 0x068E	; 0x80068e <RealKmh+0x3>
     a18:	2a e0       	ldi	r18, 0x0A	; 10
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	8a ea       	ldi	r24, 0xAA	; 170
     a1e:	96 e0       	ldi	r25, 0x06	; 6
     a20:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <Print::println(unsigned long, int)>
     a24:	80 91 8b 06 	lds	r24, 0x068B	; 0x80068b <RealKmh>
     a28:	90 91 8c 06 	lds	r25, 0x068C	; 0x80068c <RealKmh+0x1>
     a2c:	90 93 a0 06 	sts	0x06A0, r25	; 0x8006a0 <SpeedKmh+0x1>
     a30:	80 93 9f 06 	sts	0x069F, r24	; 0x80069f <SpeedKmh>
     a34:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Length>
     a38:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Length+0x1>
     a3c:	8c 9f       	mul	r24, r28
     a3e:	90 01       	movw	r18, r0
     a40:	8d 9f       	mul	r24, r29
     a42:	30 0d       	add	r19, r0
     a44:	9c 9f       	mul	r25, r28
     a46:	30 0d       	add	r19, r0
     a48:	11 24       	eor	r1, r1
     a4a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Scale>
     a4e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Scale+0x1>
     a52:	28 9f       	mul	r18, r24
     a54:	b0 01       	movw	r22, r0
     a56:	29 9f       	mul	r18, r25
     a58:	70 0d       	add	r23, r0
     a5a:	38 9f       	mul	r19, r24
     a5c:	70 0d       	add	r23, r0
     a5e:	11 24       	eor	r1, r1
     a60:	07 2e       	mov	r0, r23
     a62:	00 0c       	add	r0, r0
     a64:	88 0b       	sbc	r24, r24
     a66:	99 0b       	sbc	r25, r25
     a68:	20 91 8f 06 	lds	r18, 0x068F	; 0x80068f <Delta>
     a6c:	30 91 90 06 	lds	r19, 0x0690	; 0x800690 <Delta+0x1>
     a70:	40 91 91 06 	lds	r20, 0x0691	; 0x800691 <Delta+0x2>
     a74:	50 91 92 06 	lds	r21, 0x0692	; 0x800692 <Delta+0x3>
     a78:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__udivmodsi4>
     a7c:	69 01       	movw	r12, r18
     a7e:	60 ec       	ldi	r22, 0xC0	; 192
     a80:	74 e0       	ldi	r23, 0x04	; 4
     a82:	8a ea       	ldi	r24, 0xAA	; 170
     a84:	96 e0       	ldi	r25, 0x06	; 6
     a86:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Print::print(char const*)>
     a8a:	4a e0       	ldi	r20, 0x0A	; 10
     a8c:	50 e0       	ldi	r21, 0x00	; 0
     a8e:	b6 01       	movw	r22, r12
     a90:	8a ea       	ldi	r24, 0xAA	; 170
     a92:	96 e0       	ldi	r25, 0x06	; 6
     a94:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Print::println(int, int)>
     a98:	6d ec       	ldi	r22, 0xCD	; 205
     a9a:	74 e0       	ldi	r23, 0x04	; 4
     a9c:	8a ea       	ldi	r24, 0xAA	; 170
     a9e:	96 e0       	ldi	r25, 0x06	; 6
     aa0:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     aa4:	8e e6       	ldi	r24, 0x6E	; 110
     aa6:	96 e0       	ldi	r25, 0x06	; 6
     aa8:	0e 94 bf 09 	call	0x137e	; 0x137e <LiquidCrystal::clear()>
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	60 e0       	ldi	r22, 0x00	; 0
     ab0:	8e e6       	ldi	r24, 0x6E	; 110
     ab2:	96 e0       	ldi	r25, 0x06	; 6
     ab4:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     ab8:	68 ed       	ldi	r22, 0xD8	; 216
     aba:	74 e0       	ldi	r23, 0x04	; 4
     abc:	8e e6       	ldi	r24, 0x6E	; 110
     abe:	96 e0       	ldi	r25, 0x06	; 6
     ac0:	0e 94 92 00 	call	0x124	; 0x124 <Print::write(char const*)>
     ac4:	40 e0       	ldi	r20, 0x00	; 0
     ac6:	67 e0       	ldi	r22, 0x07	; 7
     ac8:	8e e6       	ldi	r24, 0x6E	; 110
     aca:	96 e0       	ldi	r25, 0x06	; 6
     acc:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     ad0:	40 91 8f 06 	lds	r20, 0x068F	; 0x80068f <Delta>
     ad4:	50 91 90 06 	lds	r21, 0x0690	; 0x800690 <Delta+0x1>
     ad8:	60 91 91 06 	lds	r22, 0x0691	; 0x800691 <Delta+0x2>
     adc:	70 91 92 06 	lds	r23, 0x0692	; 0x800692 <Delta+0x3>
     ae0:	2a e0       	ldi	r18, 0x0A	; 10
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	8e e6       	ldi	r24, 0x6E	; 110
     ae6:	96 e0       	ldi	r25, 0x06	; 6
     ae8:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <Print::print(unsigned long, int)>
     aec:	41 e0       	ldi	r20, 0x01	; 1
     aee:	60 e0       	ldi	r22, 0x00	; 0
     af0:	8e e6       	ldi	r24, 0x6E	; 110
     af2:	96 e0       	ldi	r25, 0x06	; 6
     af4:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     af8:	6e ed       	ldi	r22, 0xDE	; 222
     afa:	74 e0       	ldi	r23, 0x04	; 4
     afc:	8e e6       	ldi	r24, 0x6E	; 110
     afe:	96 e0       	ldi	r25, 0x06	; 6
     b00:	0e 94 92 00 	call	0x124	; 0x124 <Print::write(char const*)>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	67 e0       	ldi	r22, 0x07	; 7
     b08:	8e e6       	ldi	r24, 0x6E	; 110
     b0a:	96 e0       	ldi	r25, 0x06	; 6
     b0c:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     b10:	60 91 9f 06 	lds	r22, 0x069F	; 0x80069f <SpeedKmh>
     b14:	70 91 a0 06 	lds	r23, 0x06A0	; 0x8006a0 <SpeedKmh+0x1>
     b18:	4a e0       	ldi	r20, 0x0A	; 10
     b1a:	50 e0       	ldi	r21, 0x00	; 0
     b1c:	8e e6       	ldi	r24, 0x6E	; 110
     b1e:	96 e0       	ldi	r25, 0x06	; 6
     b20:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <Print::print(int, int)>
     b24:	64 ee       	ldi	r22, 0xE4	; 228
     b26:	74 e0       	ldi	r23, 0x04	; 4
     b28:	8a ea       	ldi	r24, 0xAA	; 170
     b2a:	96 e0       	ldi	r25, 0x06	; 6
     b2c:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Print::print(char const*)>
     b30:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <Length>
     b34:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <Length+0x1>
     b38:	4a e0       	ldi	r20, 0x0A	; 10
     b3a:	50 e0       	ldi	r21, 0x00	; 0
     b3c:	8a ea       	ldi	r24, 0xAA	; 170
     b3e:	96 e0       	ldi	r25, 0x06	; 6
     b40:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <Print::print(int, int)>
     b44:	6e ee       	ldi	r22, 0xEE	; 238
     b46:	74 e0       	ldi	r23, 0x04	; 4
     b48:	8a ea       	ldi	r24, 0xAA	; 170
     b4a:	96 e0       	ldi	r25, 0x06	; 6
     b4c:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     b50:	62 ef       	ldi	r22, 0xF2	; 242
     b52:	74 e0       	ldi	r23, 0x04	; 4
     b54:	8a ea       	ldi	r24, 0xAA	; 170
     b56:	96 e0       	ldi	r25, 0x06	; 6
     b58:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Print::print(char const*)>
     b5c:	40 91 8f 06 	lds	r20, 0x068F	; 0x80068f <Delta>
     b60:	50 91 90 06 	lds	r21, 0x0690	; 0x800690 <Delta+0x1>
     b64:	60 91 91 06 	lds	r22, 0x0691	; 0x800691 <Delta+0x2>
     b68:	70 91 92 06 	lds	r23, 0x0692	; 0x800692 <Delta+0x3>
     b6c:	2a e0       	ldi	r18, 0x0A	; 10
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	8a ea       	ldi	r24, 0xAA	; 170
     b72:	96 e0       	ldi	r25, 0x06	; 6
     b74:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <Print::print(unsigned long, int)>
     b78:	6c ef       	ldi	r22, 0xFC	; 252
     b7a:	74 e0       	ldi	r23, 0x04	; 4
     b7c:	8a ea       	ldi	r24, 0xAA	; 170
     b7e:	96 e0       	ldi	r25, 0x06	; 6
     b80:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     b84:	62 e0       	ldi	r22, 0x02	; 2
     b86:	75 e0       	ldi	r23, 0x05	; 5
     b88:	8a ea       	ldi	r24, 0xAA	; 170
     b8a:	96 e0       	ldi	r25, 0x06	; 6
     b8c:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Print::print(char const*)>
     b90:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <Scale>
     b94:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <Scale+0x1>
     b98:	4a e0       	ldi	r20, 0x0A	; 10
     b9a:	50 e0       	ldi	r21, 0x00	; 0
     b9c:	8a ea       	ldi	r24, 0xAA	; 170
     b9e:	96 e0       	ldi	r25, 0x06	; 6
     ba0:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <Print::print(int, int)>
     ba4:	67 ea       	ldi	r22, 0xA7	; 167
     ba6:	71 e0       	ldi	r23, 0x01	; 1
     ba8:	8a ea       	ldi	r24, 0xAA	; 170
     baa:	96 e0       	ldi	r25, 0x06	; 6
     bac:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     bb0:	6c e0       	ldi	r22, 0x0C	; 12
     bb2:	75 e0       	ldi	r23, 0x05	; 5
     bb4:	8a ea       	ldi	r24, 0xAA	; 170
     bb6:	96 e0       	ldi	r25, 0x06	; 6
     bb8:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Print::print(char const*)>
     bbc:	60 91 9f 06 	lds	r22, 0x069F	; 0x80069f <SpeedKmh>
     bc0:	70 91 a0 06 	lds	r23, 0x06A0	; 0x8006a0 <SpeedKmh+0x1>
     bc4:	4a e0       	ldi	r20, 0x0A	; 10
     bc6:	50 e0       	ldi	r21, 0x00	; 0
     bc8:	8a ea       	ldi	r24, 0xAA	; 170
     bca:	96 e0       	ldi	r25, 0x06	; 6
     bcc:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <Print::print(int, int)>
     bd0:	66 e1       	ldi	r22, 0x16	; 22
     bd2:	75 e0       	ldi	r23, 0x05	; 5
     bd4:	8a ea       	ldi	r24, 0xAA	; 170
     bd6:	96 e0       	ldi	r25, 0x06	; 6
     bd8:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     bdc:	61 e0       	ldi	r22, 0x01	; 1
     bde:	8d e0       	ldi	r24, 0x0D	; 13
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	ff 90       	pop	r15
     be6:	ef 90       	pop	r14
     be8:	df 90       	pop	r13
     bea:	cf 90       	pop	r12
     bec:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <digitalWrite>

00000bf0 <RightStop()>:
_Z9RightStopv():
     bf0:	41 e0       	ldi	r20, 0x01	; 1
     bf2:	60 e0       	ldi	r22, 0x00	; 0
     bf4:	8e e6       	ldi	r24, 0x6E	; 110
     bf6:	96 e0       	ldi	r25, 0x06	; 6
     bf8:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     bfc:	6c e1       	ldi	r22, 0x1C	; 28
     bfe:	75 e0       	ldi	r23, 0x05	; 5
     c00:	8e e6       	ldi	r24, 0x6E	; 110
     c02:	96 e0       	ldi	r25, 0x06	; 6
     c04:	0e 94 92 00 	call	0x124	; 0x124 <Print::write(char const*)>
     c08:	69 ee       	ldi	r22, 0xE9	; 233
     c0a:	73 e0       	ldi	r23, 0x03	; 3
     c0c:	8a ea       	ldi	r24, 0xAA	; 170
     c0e:	96 e0       	ldi	r25, 0x06	; 6
     c10:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     c14:	64 e2       	ldi	r22, 0x24	; 36
     c16:	75 e0       	ldi	r23, 0x05	; 5
     c18:	8a ea       	ldi	r24, 0xAA	; 170
     c1a:	96 e0       	ldi	r25, 0x06	; 6
     c1c:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     c20:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <millis>
     c24:	60 93 93 06 	sts	0x0693, r22	; 0x800693 <Finish>
     c28:	70 93 94 06 	sts	0x0694, r23	; 0x800694 <Finish+0x1>
     c2c:	80 93 95 06 	sts	0x0695, r24	; 0x800695 <Finish+0x2>
     c30:	90 93 96 06 	sts	0x0696, r25	; 0x800696 <Finish+0x3>
     c34:	0c 94 39 04 	jmp	0x872	; 0x872 <CalculateSpeed()>

00000c38 <LeftStop()>:
_Z8LeftStopv():
     c38:	41 e0       	ldi	r20, 0x01	; 1
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	8e e6       	ldi	r24, 0x6E	; 110
     c3e:	96 e0       	ldi	r25, 0x06	; 6
     c40:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     c44:	6c e1       	ldi	r22, 0x1C	; 28
     c46:	75 e0       	ldi	r23, 0x05	; 5
     c48:	8e e6       	ldi	r24, 0x6E	; 110
     c4a:	96 e0       	ldi	r25, 0x06	; 6
     c4c:	0e 94 92 00 	call	0x124	; 0x124 <Print::write(char const*)>
     c50:	64 e9       	ldi	r22, 0x94	; 148
     c52:	73 e0       	ldi	r23, 0x03	; 3
     c54:	8a ea       	ldi	r24, 0xAA	; 170
     c56:	96 e0       	ldi	r25, 0x06	; 6
     c58:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     c5c:	68 e3       	ldi	r22, 0x38	; 56
     c5e:	75 e0       	ldi	r23, 0x05	; 5
     c60:	8a ea       	ldi	r24, 0xAA	; 170
     c62:	96 e0       	ldi	r25, 0x06	; 6
     c64:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     c68:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <millis>
     c6c:	60 93 93 06 	sts	0x0693, r22	; 0x800693 <Finish>
     c70:	70 93 94 06 	sts	0x0694, r23	; 0x800694 <Finish+0x1>
     c74:	80 93 95 06 	sts	0x0695, r24	; 0x800695 <Finish+0x2>
     c78:	90 93 96 06 	sts	0x0696, r25	; 0x800696 <Finish+0x3>
     c7c:	0c 94 39 04 	jmp	0x872	; 0x872 <CalculateSpeed()>

00000c80 <ProcessMenu()>:
_Z11ProcessMenuv():
     c80:	ef 92       	push	r14
     c82:	ff 92       	push	r15
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	c0 91 04 01 	lds	r28, 0x0104	; 0x800104 <Scale>
     c90:	d0 91 05 01 	lds	r29, 0x0105	; 0x800105 <Scale+0x1>
     c94:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <Length>
     c98:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <Length+0x1>
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <MenuMode>
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	90 93 9c 06 	sts	0x069C, r25	; 0x80069c <MenuStep+0x1>
     caa:	80 93 9b 06 	sts	0x069B, r24	; 0x80069b <MenuStep>
     cae:	6b e4       	ldi	r22, 0x4B	; 75
     cb0:	75 e0       	ldi	r23, 0x05	; 5
     cb2:	8a ea       	ldi	r24, 0xAA	; 170
     cb4:	96 e0       	ldi	r25, 0x06	; 6
     cb6:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Print::print(char const*)>
     cba:	4a e0       	ldi	r20, 0x0A	; 10
     cbc:	50 e0       	ldi	r21, 0x00	; 0
     cbe:	be 01       	movw	r22, r28
     cc0:	8a ea       	ldi	r24, 0xAA	; 170
     cc2:	96 e0       	ldi	r25, 0x06	; 6
     cc4:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Print::println(int, int)>
     cc8:	8e e6       	ldi	r24, 0x6E	; 110
     cca:	96 e0       	ldi	r25, 0x06	; 6
     ccc:	0e 94 bf 09 	call	0x137e	; 0x137e <LiquidCrystal::clear()>
     cd0:	40 e0       	ldi	r20, 0x00	; 0
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	8e e6       	ldi	r24, 0x6E	; 110
     cd6:	96 e0       	ldi	r25, 0x06	; 6
     cd8:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     cdc:	6a e5       	ldi	r22, 0x5A	; 90
     cde:	75 e0       	ldi	r23, 0x05	; 5
     ce0:	8e e6       	ldi	r24, 0x6E	; 110
     ce2:	96 e0       	ldi	r25, 0x06	; 6
     ce4:	0e 94 92 00 	call	0x124	; 0x124 <Print::write(char const*)>
     ce8:	40 e0       	ldi	r20, 0x00	; 0
     cea:	6a e0       	ldi	r22, 0x0A	; 10
     cec:	8e e6       	ldi	r24, 0x6E	; 110
     cee:	96 e0       	ldi	r25, 0x06	; 6
     cf0:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     cf4:	4a e0       	ldi	r20, 0x0A	; 10
     cf6:	50 e0       	ldi	r21, 0x00	; 0
     cf8:	be 01       	movw	r22, r28
     cfa:	8e e6       	ldi	r24, 0x6E	; 110
     cfc:	96 e0       	ldi	r25, 0x06	; 6
     cfe:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <Print::print(int, int)>
     d02:	64 ef       	ldi	r22, 0xF4	; 244
     d04:	71 e0       	ldi	r23, 0x01	; 1
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	0e 94 1c 0b 	call	0x1638	; 0x1638 <delay>
     d0e:	86 e0       	ldi	r24, 0x06	; 6
     d10:	0e 94 1b 0c 	call	0x1836	; 0x1836 <digitalRead>
     d14:	f1 2c       	mov	r15, r1
     d16:	89 2b       	or	r24, r25
     d18:	41 f4       	brne	.+16     	; 0xd2a <ProcessMenu()+0xaa>
     d1a:	64 ef       	ldi	r22, 0xF4	; 244
     d1c:	71 e0       	ldi	r23, 0x01	; 1
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	0e 94 1c 0b 	call	0x1638	; 0x1638 <delay>
     d26:	ff 24       	eor	r15, r15
     d28:	f3 94       	inc	r15
     d2a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Taste_DOWN>
     d2e:	0e 94 1b 0c 	call	0x1836	; 0x1836 <digitalRead>
     d32:	89 2b       	or	r24, r25
     d34:	61 f5       	brne	.+88     	; 0xd8e <ProcessMenu()+0x10e>
     d36:	68 ec       	ldi	r22, 0xC8	; 200
     d38:	70 e0       	ldi	r23, 0x00	; 0
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	0e 94 1c 0b 	call	0x1638	; 0x1638 <delay>
     d42:	21 96       	adiw	r28, 0x01	; 1
     d44:	c1 3f       	cpi	r28, 0xF1	; 241
     d46:	d1 05       	cpc	r29, r1
     d48:	14 f0       	brlt	.+4      	; 0xd4e <ProcessMenu()+0xce>
     d4a:	c0 ef       	ldi	r28, 0xF0	; 240
     d4c:	d0 e0       	ldi	r29, 0x00	; 0
     d4e:	4a e0       	ldi	r20, 0x0A	; 10
     d50:	50 e0       	ldi	r21, 0x00	; 0
     d52:	be 01       	movw	r22, r28
     d54:	8a ea       	ldi	r24, 0xAA	; 170
     d56:	96 e0       	ldi	r25, 0x06	; 6
     d58:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Print::println(int, int)>
     d5c:	40 e0       	ldi	r20, 0x00	; 0
     d5e:	6a e0       	ldi	r22, 0x0A	; 10
     d60:	8e e6       	ldi	r24, 0x6E	; 110
     d62:	96 e0       	ldi	r25, 0x06	; 6
     d64:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     d68:	63 e6       	ldi	r22, 0x63	; 99
     d6a:	75 e0       	ldi	r23, 0x05	; 5
     d6c:	8e e6       	ldi	r24, 0x6E	; 110
     d6e:	96 e0       	ldi	r25, 0x06	; 6
     d70:	0e 94 92 00 	call	0x124	; 0x124 <Print::write(char const*)>
     d74:	40 e0       	ldi	r20, 0x00	; 0
     d76:	6a e0       	ldi	r22, 0x0A	; 10
     d78:	8e e6       	ldi	r24, 0x6E	; 110
     d7a:	96 e0       	ldi	r25, 0x06	; 6
     d7c:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     d80:	4a e0       	ldi	r20, 0x0A	; 10
     d82:	50 e0       	ldi	r21, 0x00	; 0
     d84:	be 01       	movw	r22, r28
     d86:	8e e6       	ldi	r24, 0x6E	; 110
     d88:	96 e0       	ldi	r25, 0x06	; 6
     d8a:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <Print::print(int, int)>
     d8e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Taste_UP>
     d92:	0e 94 1b 0c 	call	0x1836	; 0x1836 <digitalRead>
     d96:	89 2b       	or	r24, r25
     d98:	61 f5       	brne	.+88     	; 0xdf2 <ProcessMenu()+0x172>
     d9a:	68 ec       	ldi	r22, 0xC8	; 200
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	0e 94 1c 0b 	call	0x1638	; 0x1638 <delay>
     da6:	21 97       	sbiw	r28, 0x01	; 1
     da8:	1c 16       	cp	r1, r28
     daa:	1d 06       	cpc	r1, r29
     dac:	14 f0       	brlt	.+4      	; 0xdb2 <ProcessMenu()+0x132>
     dae:	c1 e0       	ldi	r28, 0x01	; 1
     db0:	d0 e0       	ldi	r29, 0x00	; 0
     db2:	4a e0       	ldi	r20, 0x0A	; 10
     db4:	50 e0       	ldi	r21, 0x00	; 0
     db6:	be 01       	movw	r22, r28
     db8:	8a ea       	ldi	r24, 0xAA	; 170
     dba:	96 e0       	ldi	r25, 0x06	; 6
     dbc:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Print::println(int, int)>
     dc0:	40 e0       	ldi	r20, 0x00	; 0
     dc2:	6a e0       	ldi	r22, 0x0A	; 10
     dc4:	8e e6       	ldi	r24, 0x6E	; 110
     dc6:	96 e0       	ldi	r25, 0x06	; 6
     dc8:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     dcc:	63 e6       	ldi	r22, 0x63	; 99
     dce:	75 e0       	ldi	r23, 0x05	; 5
     dd0:	8e e6       	ldi	r24, 0x6E	; 110
     dd2:	96 e0       	ldi	r25, 0x06	; 6
     dd4:	0e 94 92 00 	call	0x124	; 0x124 <Print::write(char const*)>
     dd8:	40 e0       	ldi	r20, 0x00	; 0
     dda:	6a e0       	ldi	r22, 0x0A	; 10
     ddc:	8e e6       	ldi	r24, 0x6E	; 110
     dde:	96 e0       	ldi	r25, 0x06	; 6
     de0:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     de4:	4a e0       	ldi	r20, 0x0A	; 10
     de6:	50 e0       	ldi	r21, 0x00	; 0
     de8:	be 01       	movw	r22, r28
     dea:	8e e6       	ldi	r24, 0x6E	; 110
     dec:	96 e0       	ldi	r25, 0x06	; 6
     dee:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <Print::print(int, int)>
     df2:	ff 20       	and	r15, r15
     df4:	09 f4       	brne	.+2      	; 0xdf8 <ProcessMenu()+0x178>
     df6:	8b cf       	rjmp	.-234    	; 0xd0e <ProcessMenu()+0x8e>
     df8:	69 e6       	ldi	r22, 0x69	; 105
     dfa:	75 e0       	ldi	r23, 0x05	; 5
     dfc:	8a ea       	ldi	r24, 0xAA	; 170
     dfe:	96 e0       	ldi	r25, 0x06	; 6
     e00:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Print::print(char const*)>
     e04:	4a e0       	ldi	r20, 0x0A	; 10
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	b8 01       	movw	r22, r16
     e0a:	8a ea       	ldi	r24, 0xAA	; 170
     e0c:	96 e0       	ldi	r25, 0x06	; 6
     e0e:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Print::println(int, int)>
     e12:	41 e0       	ldi	r20, 0x01	; 1
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	8e e6       	ldi	r24, 0x6E	; 110
     e18:	96 e0       	ldi	r25, 0x06	; 6
     e1a:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     e1e:	69 e7       	ldi	r22, 0x79	; 121
     e20:	75 e0       	ldi	r23, 0x05	; 5
     e22:	8e e6       	ldi	r24, 0x6E	; 110
     e24:	96 e0       	ldi	r25, 0x06	; 6
     e26:	0e 94 92 00 	call	0x124	; 0x124 <Print::write(char const*)>
     e2a:	41 e0       	ldi	r20, 0x01	; 1
     e2c:	6a e0       	ldi	r22, 0x0A	; 10
     e2e:	8e e6       	ldi	r24, 0x6E	; 110
     e30:	96 e0       	ldi	r25, 0x06	; 6
     e32:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     e36:	4a e0       	ldi	r20, 0x0A	; 10
     e38:	50 e0       	ldi	r21, 0x00	; 0
     e3a:	b8 01       	movw	r22, r16
     e3c:	8e e6       	ldi	r24, 0x6E	; 110
     e3e:	96 e0       	ldi	r25, 0x06	; 6
     e40:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <Print::print(int, int)>
     e44:	64 ef       	ldi	r22, 0xF4	; 244
     e46:	71 e0       	ldi	r23, 0x01	; 1
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	0e 94 1c 0b 	call	0x1638	; 0x1638 <delay>
     e50:	86 e0       	ldi	r24, 0x06	; 6
     e52:	0e 94 1b 0c 	call	0x1836	; 0x1836 <digitalRead>
     e56:	f1 2c       	mov	r15, r1
     e58:	89 2b       	or	r24, r25
     e5a:	41 f4       	brne	.+16     	; 0xe6c <ProcessMenu()+0x1ec>
     e5c:	64 ef       	ldi	r22, 0xF4	; 244
     e5e:	71 e0       	ldi	r23, 0x01	; 1
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	0e 94 1c 0b 	call	0x1638	; 0x1638 <delay>
     e68:	ff 24       	eor	r15, r15
     e6a:	f3 94       	inc	r15
     e6c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Taste_DOWN>
     e70:	0e 94 1b 0c 	call	0x1836	; 0x1836 <digitalRead>
     e74:	89 2b       	or	r24, r25
     e76:	69 f5       	brne	.+90     	; 0xed2 <ProcessMenu()+0x252>
     e78:	68 ec       	ldi	r22, 0xC8	; 200
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	0e 94 1c 0b 	call	0x1638	; 0x1638 <delay>
     e84:	0f 5f       	subi	r16, 0xFF	; 255
     e86:	1f 4f       	sbci	r17, 0xFF	; 255
     e88:	09 3c       	cpi	r16, 0xC9	; 201
     e8a:	11 05       	cpc	r17, r1
     e8c:	14 f0       	brlt	.+4      	; 0xe92 <ProcessMenu()+0x212>
     e8e:	08 ec       	ldi	r16, 0xC8	; 200
     e90:	10 e0       	ldi	r17, 0x00	; 0
     e92:	4a e0       	ldi	r20, 0x0A	; 10
     e94:	50 e0       	ldi	r21, 0x00	; 0
     e96:	b8 01       	movw	r22, r16
     e98:	8a ea       	ldi	r24, 0xAA	; 170
     e9a:	96 e0       	ldi	r25, 0x06	; 6
     e9c:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Print::println(int, int)>
     ea0:	41 e0       	ldi	r20, 0x01	; 1
     ea2:	6a e0       	ldi	r22, 0x0A	; 10
     ea4:	8e e6       	ldi	r24, 0x6E	; 110
     ea6:	96 e0       	ldi	r25, 0x06	; 6
     ea8:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     eac:	63 e6       	ldi	r22, 0x63	; 99
     eae:	75 e0       	ldi	r23, 0x05	; 5
     eb0:	8e e6       	ldi	r24, 0x6E	; 110
     eb2:	96 e0       	ldi	r25, 0x06	; 6
     eb4:	0e 94 92 00 	call	0x124	; 0x124 <Print::write(char const*)>
     eb8:	41 e0       	ldi	r20, 0x01	; 1
     eba:	6a e0       	ldi	r22, 0x0A	; 10
     ebc:	8e e6       	ldi	r24, 0x6E	; 110
     ebe:	96 e0       	ldi	r25, 0x06	; 6
     ec0:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     ec4:	4a e0       	ldi	r20, 0x0A	; 10
     ec6:	50 e0       	ldi	r21, 0x00	; 0
     ec8:	b8 01       	movw	r22, r16
     eca:	8e e6       	ldi	r24, 0x6E	; 110
     ecc:	96 e0       	ldi	r25, 0x06	; 6
     ece:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <Print::print(int, int)>
     ed2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Taste_UP>
     ed6:	0e 94 1b 0c 	call	0x1836	; 0x1836 <digitalRead>
     eda:	89 2b       	or	r24, r25
     edc:	69 f5       	brne	.+90     	; 0xf38 <ProcessMenu()+0x2b8>
     ede:	68 ec       	ldi	r22, 0xC8	; 200
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	0e 94 1c 0b 	call	0x1638	; 0x1638 <delay>
     eea:	01 50       	subi	r16, 0x01	; 1
     eec:	11 09       	sbc	r17, r1
     eee:	10 16       	cp	r1, r16
     ef0:	11 06       	cpc	r1, r17
     ef2:	14 f0       	brlt	.+4      	; 0xef8 <ProcessMenu()+0x278>
     ef4:	01 e0       	ldi	r16, 0x01	; 1
     ef6:	10 e0       	ldi	r17, 0x00	; 0
     ef8:	4a e0       	ldi	r20, 0x0A	; 10
     efa:	50 e0       	ldi	r21, 0x00	; 0
     efc:	b8 01       	movw	r22, r16
     efe:	8a ea       	ldi	r24, 0xAA	; 170
     f00:	96 e0       	ldi	r25, 0x06	; 6
     f02:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Print::println(int, int)>
     f06:	41 e0       	ldi	r20, 0x01	; 1
     f08:	6a e0       	ldi	r22, 0x0A	; 10
     f0a:	8e e6       	ldi	r24, 0x6E	; 110
     f0c:	96 e0       	ldi	r25, 0x06	; 6
     f0e:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     f12:	63 e6       	ldi	r22, 0x63	; 99
     f14:	75 e0       	ldi	r23, 0x05	; 5
     f16:	8e e6       	ldi	r24, 0x6E	; 110
     f18:	96 e0       	ldi	r25, 0x06	; 6
     f1a:	0e 94 92 00 	call	0x124	; 0x124 <Print::write(char const*)>
     f1e:	41 e0       	ldi	r20, 0x01	; 1
     f20:	6a e0       	ldi	r22, 0x0A	; 10
     f22:	8e e6       	ldi	r24, 0x6E	; 110
     f24:	96 e0       	ldi	r25, 0x06	; 6
     f26:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     f2a:	4a e0       	ldi	r20, 0x0A	; 10
     f2c:	50 e0       	ldi	r21, 0x00	; 0
     f2e:	b8 01       	movw	r22, r16
     f30:	8e e6       	ldi	r24, 0x6E	; 110
     f32:	96 e0       	ldi	r25, 0x06	; 6
     f34:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <Print::print(int, int)>
     f38:	ff 20       	and	r15, r15
     f3a:	09 f4       	brne	.+2      	; 0xf3e <ProcessMenu()+0x2be>
     f3c:	89 cf       	rjmp	.-238    	; 0xe50 <ProcessMenu()+0x1d0>
     f3e:	64 ef       	ldi	r22, 0xF4	; 244
     f40:	71 e0       	ldi	r23, 0x01	; 1
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	0e 94 1c 0b 	call	0x1638	; 0x1638 <delay>
     f4a:	63 e8       	ldi	r22, 0x83	; 131
     f4c:	75 e0       	ldi	r23, 0x05	; 5
     f4e:	8a ea       	ldi	r24, 0xAA	; 170
     f50:	96 e0       	ldi	r25, 0x06	; 6
     f52:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Print::print(char const*)>
     f56:	67 e9       	ldi	r22, 0x97	; 151
     f58:	75 e0       	ldi	r23, 0x05	; 5
     f5a:	8a ea       	ldi	r24, 0xAA	; 170
     f5c:	96 e0       	ldi	r25, 0x06	; 6
     f5e:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     f62:	8e e6       	ldi	r24, 0x6E	; 110
     f64:	96 e0       	ldi	r25, 0x06	; 6
     f66:	0e 94 bf 09 	call	0x137e	; 0x137e <LiquidCrystal::clear()>
     f6a:	40 e0       	ldi	r20, 0x00	; 0
     f6c:	61 e0       	ldi	r22, 0x01	; 1
     f6e:	8e e6       	ldi	r24, 0x6E	; 110
     f70:	96 e0       	ldi	r25, 0x06	; 6
     f72:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     f76:	6b e9       	ldi	r22, 0x9B	; 155
     f78:	75 e0       	ldi	r23, 0x05	; 5
     f7a:	8e e6       	ldi	r24, 0x6E	; 110
     f7c:	96 e0       	ldi	r25, 0x06	; 6
     f7e:	0e 94 92 00 	call	0x124	; 0x124 <Print::write(char const*)>
     f82:	4a e0       	ldi	r20, 0x0A	; 10
     f84:	61 e0       	ldi	r22, 0x01	; 1
     f86:	8e e6       	ldi	r24, 0x6E	; 110
     f88:	96 e0       	ldi	r25, 0x06	; 6
     f8a:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     f8e:	65 ea       	ldi	r22, 0xA5	; 165
     f90:	75 e0       	ldi	r23, 0x05	; 5
     f92:	8e e6       	ldi	r24, 0x6E	; 110
     f94:	96 e0       	ldi	r25, 0x06	; 6
     f96:	0e 94 92 00 	call	0x124	; 0x124 <Print::write(char const*)>
     f9a:	64 ef       	ldi	r22, 0xF4	; 244
     f9c:	71 e0       	ldi	r23, 0x01	; 1
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	0e 94 1c 0b 	call	0x1638	; 0x1638 <delay>
     fa6:	6c ea       	ldi	r22, 0xAC	; 172
     fa8:	75 e0       	ldi	r23, 0x05	; 5
     faa:	8a ea       	ldi	r24, 0xAA	; 170
     fac:	96 e0       	ldi	r25, 0x06	; 6
     fae:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
     fb2:	ff 24       	eor	r15, r15
     fb4:	f3 94       	inc	r15
     fb6:	86 e0       	ldi	r24, 0x06	; 6
     fb8:	0e 94 1b 0c 	call	0x1836	; 0x1836 <digitalRead>
     fbc:	e1 2c       	mov	r14, r1
     fbe:	89 2b       	or	r24, r25
     fc0:	41 f4       	brne	.+16     	; 0xfd2 <ProcessMenu()+0x352>
     fc2:	64 ef       	ldi	r22, 0xF4	; 244
     fc4:	71 e0       	ldi	r23, 0x01	; 1
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	0e 94 1c 0b 	call	0x1638	; 0x1638 <delay>
     fce:	ee 24       	eor	r14, r14
     fd0:	e3 94       	inc	r14
     fd2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Taste_DOWN>
     fd6:	0e 94 1b 0c 	call	0x1836	; 0x1836 <digitalRead>
     fda:	89 2b       	or	r24, r25
     fdc:	e1 f4       	brne	.+56     	; 0x1016 <ProcessMenu()+0x396>
     fde:	68 ec       	ldi	r22, 0xC8	; 200
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	0e 94 1c 0b 	call	0x1638	; 0x1638 <delay>
     fea:	4a e0       	ldi	r20, 0x0A	; 10
     fec:	61 e0       	ldi	r22, 0x01	; 1
     fee:	8e e6       	ldi	r24, 0x6E	; 110
     ff0:	96 e0       	ldi	r25, 0x06	; 6
     ff2:	f1 10       	cpse	r15, r1
     ff4:	77 c0       	rjmp	.+238    	; 0x10e4 <ProcessMenu()+0x464>
     ff6:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     ffa:	65 ea       	ldi	r22, 0xA5	; 165
     ffc:	75 e0       	ldi	r23, 0x05	; 5
     ffe:	8e e6       	ldi	r24, 0x6E	; 110
    1000:	96 e0       	ldi	r25, 0x06	; 6
    1002:	0e 94 92 00 	call	0x124	; 0x124 <Print::write(char const*)>
    1006:	6c ea       	ldi	r22, 0xAC	; 172
    1008:	75 e0       	ldi	r23, 0x05	; 5
    100a:	8a ea       	ldi	r24, 0xAA	; 170
    100c:	96 e0       	ldi	r25, 0x06	; 6
    100e:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
    1012:	ff 24       	eor	r15, r15
    1014:	f3 94       	inc	r15
    1016:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Taste_UP>
    101a:	0e 94 1b 0c 	call	0x1836	; 0x1836 <digitalRead>
    101e:	89 2b       	or	r24, r25
    1020:	e1 f4       	brne	.+56     	; 0x105a <ProcessMenu()+0x3da>
    1022:	68 ec       	ldi	r22, 0xC8	; 200
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	0e 94 1c 0b 	call	0x1638	; 0x1638 <delay>
    102e:	4a e0       	ldi	r20, 0x0A	; 10
    1030:	61 e0       	ldi	r22, 0x01	; 1
    1032:	8e e6       	ldi	r24, 0x6E	; 110
    1034:	96 e0       	ldi	r25, 0x06	; 6
    1036:	f1 10       	cpse	r15, r1
    1038:	65 c0       	rjmp	.+202    	; 0x1104 <ProcessMenu()+0x484>
    103a:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    103e:	65 ea       	ldi	r22, 0xA5	; 165
    1040:	75 e0       	ldi	r23, 0x05	; 5
    1042:	8e e6       	ldi	r24, 0x6E	; 110
    1044:	96 e0       	ldi	r25, 0x06	; 6
    1046:	0e 94 92 00 	call	0x124	; 0x124 <Print::write(char const*)>
    104a:	6c ea       	ldi	r22, 0xAC	; 172
    104c:	75 e0       	ldi	r23, 0x05	; 5
    104e:	8a ea       	ldi	r24, 0xAA	; 170
    1050:	96 e0       	ldi	r25, 0x06	; 6
    1052:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
    1056:	ff 24       	eor	r15, r15
    1058:	f3 94       	inc	r15
    105a:	ee 20       	and	r14, r14
    105c:	09 f4       	brne	.+2      	; 0x1060 <ProcessMenu()+0x3e0>
    105e:	ab cf       	rjmp	.-170    	; 0xfb6 <ProcessMenu()+0x336>
    1060:	ff 20       	and	r15, r15
    1062:	c1 f0       	breq	.+48     	; 0x1094 <ProcessMenu()+0x414>
    1064:	61 ec       	ldi	r22, 0xC1	; 193
    1066:	75 e0       	ldi	r23, 0x05	; 5
    1068:	8a ea       	ldi	r24, 0xAA	; 170
    106a:	96 e0       	ldi	r25, 0x06	; 6
    106c:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
    1070:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <Length+0x1>
    1074:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <Length>
_ZN5EERefaSEh():
    1078:	60 2f       	mov	r22, r16
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	0e 94 2f 11 	call	0x225e	; 0x225e <eeprom_write_byte>
_Z11ProcessMenuv():
    1082:	d0 93 05 01 	sts	0x0105, r29	; 0x800105 <Scale+0x1>
    1086:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <Scale>
_ZN5EERefaSEh():
    108a:	6c 2f       	mov	r22, r28
    108c:	82 e0       	ldi	r24, 0x02	; 2
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	0e 94 2f 11 	call	0x225e	; 0x225e <eeprom_write_byte>
_Z11ProcessMenuv():
    1094:	8e e6       	ldi	r24, 0x6E	; 110
    1096:	96 e0       	ldi	r25, 0x06	; 6
    1098:	0e 94 bf 09 	call	0x137e	; 0x137e <LiquidCrystal::clear()>
    109c:	40 e0       	ldi	r20, 0x00	; 0
    109e:	60 e0       	ldi	r22, 0x00	; 0
    10a0:	8e e6       	ldi	r24, 0x6E	; 110
    10a2:	96 e0       	ldi	r25, 0x06	; 6
    10a4:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    10a8:	69 e8       	ldi	r22, 0x89	; 137
    10aa:	72 e0       	ldi	r23, 0x02	; 2
    10ac:	8e e6       	ldi	r24, 0x6E	; 110
    10ae:	96 e0       	ldi	r25, 0x06	; 6
    10b0:	0e 94 92 00 	call	0x124	; 0x124 <Print::write(char const*)>
    10b4:	41 e0       	ldi	r20, 0x01	; 1
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	8e e6       	ldi	r24, 0x6E	; 110
    10ba:	96 e0       	ldi	r25, 0x06	; 6
    10bc:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    10c0:	68 ee       	ldi	r22, 0xE8	; 232
    10c2:	75 e0       	ldi	r23, 0x05	; 5
    10c4:	8e e6       	ldi	r24, 0x6E	; 110
    10c6:	96 e0       	ldi	r25, 0x06	; 6
    10c8:	0e 94 92 00 	call	0x124	; 0x124 <Print::write(char const*)>
    10cc:	67 ef       	ldi	r22, 0xF7	; 247
    10ce:	75 e0       	ldi	r23, 0x05	; 5
    10d0:	8a ea       	ldi	r24, 0xAA	; 170
    10d2:	96 e0       	ldi	r25, 0x06	; 6
    10d4:	df 91       	pop	r29
    10d6:	cf 91       	pop	r28
    10d8:	1f 91       	pop	r17
    10da:	0f 91       	pop	r16
    10dc:	ff 90       	pop	r15
    10de:	ef 90       	pop	r14
    10e0:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <Print::println(char const*)>
    10e4:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    10e8:	63 eb       	ldi	r22, 0xB3	; 179
    10ea:	75 e0       	ldi	r23, 0x05	; 5
    10ec:	8e e6       	ldi	r24, 0x6E	; 110
    10ee:	96 e0       	ldi	r25, 0x06	; 6
    10f0:	0e 94 92 00 	call	0x124	; 0x124 <Print::write(char const*)>
    10f4:	6a eb       	ldi	r22, 0xBA	; 186
    10f6:	75 e0       	ldi	r23, 0x05	; 5
    10f8:	8a ea       	ldi	r24, 0xAA	; 170
    10fa:	96 e0       	ldi	r25, 0x06	; 6
    10fc:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
    1100:	f1 2c       	mov	r15, r1
    1102:	89 cf       	rjmp	.-238    	; 0x1016 <ProcessMenu()+0x396>
    1104:	0e 94 c6 09 	call	0x138c	; 0x138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    1108:	63 eb       	ldi	r22, 0xB3	; 179
    110a:	75 e0       	ldi	r23, 0x05	; 5
    110c:	8e e6       	ldi	r24, 0x6E	; 110
    110e:	96 e0       	ldi	r25, 0x06	; 6
    1110:	0e 94 92 00 	call	0x124	; 0x124 <Print::write(char const*)>
    1114:	6a eb       	ldi	r22, 0xBA	; 186
    1116:	75 e0       	ldi	r23, 0x05	; 5
    1118:	8a ea       	ldi	r24, 0xAA	; 170
    111a:	96 e0       	ldi	r25, 0x06	; 6
    111c:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
    1120:	f1 2c       	mov	r15, r1
    1122:	9b cf       	rjmp	.-202    	; 0x105a <ProcessMenu()+0x3da>

00001124 <loop>:
loop():
    1124:	80 91 89 06 	lds	r24, 0x0689	; 0x800689 <Armed>
    1128:	88 23       	and	r24, r24
    112a:	b1 f0       	breq	.+44     	; 0x1158 <loop+0x34>
    112c:	61 e0       	ldi	r22, 0x01	; 1
    112e:	87 e0       	ldi	r24, 0x07	; 7
    1130:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
    1134:	60 e0       	ldi	r22, 0x00	; 0
    1136:	88 e0       	ldi	r24, 0x08	; 8
    1138:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
    113c:	82 e0       	ldi	r24, 0x02	; 2
    113e:	0e 94 1b 0c 	call	0x1836	; 0x1836 <digitalRead>
    1142:	89 2b       	or	r24, r25
    1144:	11 f0       	breq	.+4      	; 0x114a <loop+0x26>
    1146:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <LeftStart()>
    114a:	83 e0       	ldi	r24, 0x03	; 3
    114c:	0e 94 1b 0c 	call	0x1836	; 0x1836 <digitalRead>
    1150:	89 2b       	or	r24, r25
    1152:	11 f0       	breq	.+4      	; 0x1158 <loop+0x34>
    1154:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <RightStart()>
    1158:	80 91 8a 06 	lds	r24, 0x068A	; 0x80068a <Running>
    115c:	88 23       	and	r24, r24
    115e:	e1 f0       	breq	.+56     	; 0x1198 <loop+0x74>
    1160:	60 e0       	ldi	r22, 0x00	; 0
    1162:	87 e0       	ldi	r24, 0x07	; 7
    1164:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
    1168:	61 e0       	ldi	r22, 0x01	; 1
    116a:	88 e0       	ldi	r24, 0x08	; 8
    116c:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
    1170:	82 e0       	ldi	r24, 0x02	; 2
    1172:	0e 94 1b 0c 	call	0x1836	; 0x1836 <digitalRead>
    1176:	89 2b       	or	r24, r25
    1178:	29 f0       	breq	.+10     	; 0x1184 <loop+0x60>
    117a:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <Sensor1On>
    117e:	81 11       	cpse	r24, r1
    1180:	0c 94 1c 06 	jmp	0xc38	; 0xc38 <LeftStop()>
    1184:	83 e0       	ldi	r24, 0x03	; 3
    1186:	0e 94 1b 0c 	call	0x1836	; 0x1836 <digitalRead>
    118a:	89 2b       	or	r24, r25
    118c:	29 f0       	breq	.+10     	; 0x1198 <loop+0x74>
    118e:	80 91 87 06 	lds	r24, 0x0687	; 0x800687 <Sensor2On>
    1192:	81 11       	cpse	r24, r1
    1194:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <RightStop()>
    1198:	85 e0       	ldi	r24, 0x05	; 5
    119a:	0e 94 1b 0c 	call	0x1836	; 0x1836 <digitalRead>
    119e:	89 2b       	or	r24, r25
    11a0:	11 f4       	brne	.+4      	; 0x11a6 <loop+0x82>
    11a2:	0c 94 ce 02 	jmp	0x59c	; 0x59c <ResetSystem()>
    11a6:	84 e0       	ldi	r24, 0x04	; 4
    11a8:	0e 94 1b 0c 	call	0x1836	; 0x1836 <digitalRead>
    11ac:	89 2b       	or	r24, r25
    11ae:	21 f4       	brne	.+8      	; 0x11b8 <loop+0x94>
    11b0:	80 91 89 06 	lds	r24, 0x0689	; 0x800689 <Armed>
    11b4:	88 23       	and	r24, r24
    11b6:	81 f0       	breq	.+32     	; 0x11d8 <loop+0xb4>
    11b8:	86 e0       	ldi	r24, 0x06	; 6
    11ba:	0e 94 1b 0c 	call	0x1836	; 0x1836 <digitalRead>
    11be:	89 2b       	or	r24, r25
    11c0:	69 f4       	brne	.+26     	; 0x11dc <loop+0xb8>
    11c2:	62 e2       	ldi	r22, 0x22	; 34
    11c4:	76 e0       	ldi	r23, 0x06	; 6
    11c6:	8a ea       	ldi	r24, 0xAA	; 170
    11c8:	96 e0       	ldi	r25, 0x06	; 6
    11ca:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <MenuMode>
    11d4:	0c 94 40 06 	jmp	0xc80	; 0xc80 <ProcessMenu()>
    11d8:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <ArmSystem()>
    11dc:	8e e0       	ldi	r24, 0x0E	; 14
    11de:	0e 94 1b 0c 	call	0x1836	; 0x1836 <digitalRead>
    11e2:	89 2b       	or	r24, r25
    11e4:	31 f4       	brne	.+12     	; 0x11f2 <loop+0xce>
    11e6:	60 e3       	ldi	r22, 0x30	; 48
    11e8:	76 e0       	ldi	r23, 0x06	; 6
    11ea:	8a ea       	ldi	r24, 0xAA	; 170
    11ec:	96 e0       	ldi	r25, 0x06	; 6
    11ee:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <Print::println(char const*)>
    11f2:	8f e0       	ldi	r24, 0x0F	; 15
    11f4:	0e 94 1b 0c 	call	0x1836	; 0x1836 <digitalRead>
    11f8:	89 2b       	or	r24, r25
    11fa:	31 f4       	brne	.+12     	; 0x1208 <loop+0xe4>
    11fc:	6e e3       	ldi	r22, 0x3E	; 62
    11fe:	76 e0       	ldi	r23, 0x06	; 6
    1200:	8a ea       	ldi	r24, 0xAA	; 170
    1202:	96 e0       	ldi	r25, 0x06	; 6
    1204:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <Print::println(char const*)>
    1208:	08 95       	ret

0000120a <_GLOBAL__sub_I_Version>:
_GLOBAL__sub_I_Version():
    120a:	cf 92       	push	r12
    120c:	ef 92       	push	r14
    120e:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/Users/Tom/Documents/Arduino/Projekte/TrainSpeedo/Arduino/TrainSpeedo_v1_0/TrainSpeedo_v1_0.ino:92
// TMO
int Taste_DOWN = A1;
int Taste_UP   = A0;

// initialize the library with the numbers of the interface pins
LiquidCrystal LCD(12, 11, A2, A3, A4, A5);
    1210:	83 e1       	ldi	r24, 0x13	; 19
    1212:	c8 2e       	mov	r12, r24
    1214:	92 e1       	ldi	r25, 0x12	; 18
    1216:	e9 2e       	mov	r14, r25
    1218:	01 e1       	ldi	r16, 0x11	; 17
    121a:	20 e1       	ldi	r18, 0x10	; 16
    121c:	4b e0       	ldi	r20, 0x0B	; 11
    121e:	6c e0       	ldi	r22, 0x0C	; 12
    1220:	8e e6       	ldi	r24, 0x6E	; 110
    1222:	96 e0       	ldi	r25, 0x06	; 6
    1224:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <LiquidCrystal::LiquidCrystal(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I_Version():
/Users/Tom/Documents/Arduino/Projekte/TrainSpeedo/Arduino/TrainSpeedo_v1_0/TrainSpeedo_v1_0.ino:499
/////////////////////////////////////////////////////////////////////////////////
//  DoNothing
/////////////////////////////////////////////////////////////////////////////////
void DoNothing()
{ /// absolutely NUTTIN'
}
    1228:	0f 91       	pop	r16
    122a:	ef 90       	pop	r14
    122c:	cf 90       	pop	r12
    122e:	08 95       	ret

00001230 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
/Applications/Arduino.app/Contents/Java/libraries/LiquidCrystal/src/LiquidCrystal.cpp:271
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	08 95       	ret

00001236 <Print::flush()>:
_ZN5Print5flushEv():
    1236:	08 95       	ret

00001238 <LiquidCrystal::pulseEnable()>:
_ZN13LiquidCrystal11pulseEnableEv():
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	ec 01       	movw	r28, r24
    123e:	60 e0       	ldi	r22, 0x00	; 0
    1240:	8e 81       	ldd	r24, Y+6	; 0x06
    1242:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	0e 94 55 0b 	call	0x16aa	; 0x16aa <delayMicroseconds>
    124e:	61 e0       	ldi	r22, 0x01	; 1
    1250:	8e 81       	ldd	r24, Y+6	; 0x06
    1252:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	0e 94 55 0b 	call	0x16aa	; 0x16aa <delayMicroseconds>
    125e:	60 e0       	ldi	r22, 0x00	; 0
    1260:	8e 81       	ldd	r24, Y+6	; 0x06
    1262:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
    1266:	84 e6       	ldi	r24, 0x64	; 100
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <delayMicroseconds>

00001272 <LiquidCrystal::write4bits(unsigned char)>:
_ZN13LiquidCrystal10write4bitsEh():
    1272:	cf 92       	push	r12
    1274:	df 92       	push	r13
    1276:	ef 92       	push	r14
    1278:	ff 92       	push	r15
    127a:	0f 93       	push	r16
    127c:	1f 93       	push	r17
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
    1282:	6c 01       	movw	r12, r24
    1284:	7c 01       	movw	r14, r24
    1286:	87 e0       	ldi	r24, 0x07	; 7
    1288:	e8 0e       	add	r14, r24
    128a:	f1 1c       	adc	r15, r1
    128c:	d0 e0       	ldi	r29, 0x00	; 0
    128e:	c0 e0       	ldi	r28, 0x00	; 0
    1290:	06 2f       	mov	r16, r22
    1292:	10 e0       	ldi	r17, 0x00	; 0
    1294:	b8 01       	movw	r22, r16
    1296:	0c 2e       	mov	r0, r28
    1298:	02 c0       	rjmp	.+4      	; 0x129e <LiquidCrystal::write4bits(unsigned char)+0x2c>
    129a:	75 95       	asr	r23
    129c:	67 95       	ror	r22
    129e:	0a 94       	dec	r0
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <LiquidCrystal::write4bits(unsigned char)+0x28>
    12a2:	61 70       	andi	r22, 0x01	; 1
    12a4:	f7 01       	movw	r30, r14
    12a6:	81 91       	ld	r24, Z+
    12a8:	7f 01       	movw	r14, r30
    12aa:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
    12ae:	21 96       	adiw	r28, 0x01	; 1
    12b0:	c4 30       	cpi	r28, 0x04	; 4
    12b2:	d1 05       	cpc	r29, r1
    12b4:	79 f7       	brne	.-34     	; 0x1294 <LiquidCrystal::write4bits(unsigned char)+0x22>
    12b6:	c6 01       	movw	r24, r12
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	1f 91       	pop	r17
    12be:	0f 91       	pop	r16
    12c0:	ff 90       	pop	r15
    12c2:	ef 90       	pop	r14
    12c4:	df 90       	pop	r13
    12c6:	cf 90       	pop	r12
    12c8:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <LiquidCrystal::pulseEnable()>

000012cc <LiquidCrystal::write8bits(unsigned char)>:
_ZN13LiquidCrystal10write8bitsEh():
    12cc:	cf 92       	push	r12
    12ce:	df 92       	push	r13
    12d0:	ef 92       	push	r14
    12d2:	ff 92       	push	r15
    12d4:	0f 93       	push	r16
    12d6:	1f 93       	push	r17
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	6c 01       	movw	r12, r24
    12de:	7c 01       	movw	r14, r24
    12e0:	87 e0       	ldi	r24, 0x07	; 7
    12e2:	e8 0e       	add	r14, r24
    12e4:	f1 1c       	adc	r15, r1
    12e6:	d0 e0       	ldi	r29, 0x00	; 0
    12e8:	c0 e0       	ldi	r28, 0x00	; 0
    12ea:	06 2f       	mov	r16, r22
    12ec:	10 e0       	ldi	r17, 0x00	; 0
    12ee:	b8 01       	movw	r22, r16
    12f0:	0c 2e       	mov	r0, r28
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <LiquidCrystal::write8bits(unsigned char)+0x2c>
    12f4:	75 95       	asr	r23
    12f6:	67 95       	ror	r22
    12f8:	0a 94       	dec	r0
    12fa:	e2 f7       	brpl	.-8      	; 0x12f4 <LiquidCrystal::write8bits(unsigned char)+0x28>
    12fc:	61 70       	andi	r22, 0x01	; 1
    12fe:	f7 01       	movw	r30, r14
    1300:	81 91       	ld	r24, Z+
    1302:	7f 01       	movw	r14, r30
    1304:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
    1308:	21 96       	adiw	r28, 0x01	; 1
    130a:	c8 30       	cpi	r28, 0x08	; 8
    130c:	d1 05       	cpc	r29, r1
    130e:	79 f7       	brne	.-34     	; 0x12ee <LiquidCrystal::write8bits(unsigned char)+0x22>
    1310:	c6 01       	movw	r24, r12
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	1f 91       	pop	r17
    1318:	0f 91       	pop	r16
    131a:	ff 90       	pop	r15
    131c:	ef 90       	pop	r14
    131e:	df 90       	pop	r13
    1320:	cf 90       	pop	r12
    1322:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <LiquidCrystal::pulseEnable()>

00001326 <LiquidCrystal::send(unsigned char, unsigned char)>:
_ZN13LiquidCrystal4sendEhh():
    1326:	1f 93       	push	r17
    1328:	cf 93       	push	r28
    132a:	df 93       	push	r29
    132c:	ec 01       	movw	r28, r24
    132e:	16 2f       	mov	r17, r22
    1330:	64 2f       	mov	r22, r20
    1332:	8c 81       	ldd	r24, Y+4	; 0x04
    1334:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
    1338:	8d 81       	ldd	r24, Y+5	; 0x05
    133a:	8f 3f       	cpi	r24, 0xFF	; 255
    133c:	19 f0       	breq	.+6      	; 0x1344 <LiquidCrystal::send(unsigned char, unsigned char)+0x1e>
    133e:	60 e0       	ldi	r22, 0x00	; 0
    1340:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
    1344:	8f 85       	ldd	r24, Y+15	; 0x0f
    1346:	61 2f       	mov	r22, r17
    1348:	84 ff       	sbrs	r24, 4
    134a:	06 c0       	rjmp	.+12     	; 0x1358 <LiquidCrystal::send(unsigned char, unsigned char)+0x32>
    134c:	ce 01       	movw	r24, r28
    134e:	df 91       	pop	r29
    1350:	cf 91       	pop	r28
    1352:	1f 91       	pop	r17
    1354:	0c 94 66 09 	jmp	0x12cc	; 0x12cc <LiquidCrystal::write8bits(unsigned char)>
    1358:	70 e0       	ldi	r23, 0x00	; 0
    135a:	84 e0       	ldi	r24, 0x04	; 4
    135c:	75 95       	asr	r23
    135e:	67 95       	ror	r22
    1360:	8a 95       	dec	r24
    1362:	e1 f7       	brne	.-8      	; 0x135c <LiquidCrystal::send(unsigned char, unsigned char)+0x36>
    1364:	ce 01       	movw	r24, r28
    1366:	0e 94 39 09 	call	0x1272	; 0x1272 <LiquidCrystal::write4bits(unsigned char)>
    136a:	61 2f       	mov	r22, r17
    136c:	ce 01       	movw	r24, r28
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	1f 91       	pop	r17
    1374:	0c 94 39 09 	jmp	0x1272	; 0x1272 <LiquidCrystal::write4bits(unsigned char)>

00001378 <LiquidCrystal::command(unsigned char)>:
_ZN13LiquidCrystal7commandEh():
    1378:	40 e0       	ldi	r20, 0x00	; 0
    137a:	0c 94 93 09 	jmp	0x1326	; 0x1326 <LiquidCrystal::send(unsigned char, unsigned char)>

0000137e <LiquidCrystal::clear()>:
_ZN13LiquidCrystal5clearEv():
    137e:	61 e0       	ldi	r22, 0x01	; 1
    1380:	0e 94 bc 09 	call	0x1378	; 0x1378 <LiquidCrystal::command(unsigned char)>
    1384:	80 ed       	ldi	r24, 0xD0	; 208
    1386:	97 e0       	ldi	r25, 0x07	; 7
    1388:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <delayMicroseconds>

0000138c <LiquidCrystal::setCursor(unsigned char, unsigned char)>:
_ZN13LiquidCrystal9setCursorEhh():
    138c:	44 30       	cpi	r20, 0x04	; 4
    138e:	08 f0       	brcs	.+2      	; 0x1392 <LiquidCrystal::setCursor(unsigned char, unsigned char)+0x6>
    1390:	43 e0       	ldi	r20, 0x03	; 3
    1392:	fc 01       	movw	r30, r24
    1394:	23 89       	ldd	r18, Z+19	; 0x13
    1396:	42 17       	cp	r20, r18
    1398:	10 f0       	brcs	.+4      	; 0x139e <LiquidCrystal::setCursor(unsigned char, unsigned char)+0x12>
    139a:	4f ef       	ldi	r20, 0xFF	; 255
    139c:	42 0f       	add	r20, r18
    139e:	fc 01       	movw	r30, r24
    13a0:	e4 0f       	add	r30, r20
    13a2:	f1 1d       	adc	r31, r1
    13a4:	24 89       	ldd	r18, Z+20	; 0x14
    13a6:	62 0f       	add	r22, r18
    13a8:	60 68       	ori	r22, 0x80	; 128
    13aa:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <LiquidCrystal::command(unsigned char)>

000013ae <LiquidCrystal::display()>:
_ZN13LiquidCrystal7displayEv():
    13ae:	fc 01       	movw	r30, r24
    13b0:	60 89       	ldd	r22, Z+16	; 0x10
    13b2:	26 2f       	mov	r18, r22
    13b4:	24 60       	ori	r18, 0x04	; 4
    13b6:	20 8b       	std	Z+16, r18	; 0x10
    13b8:	6c 60       	ori	r22, 0x0C	; 12
    13ba:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <LiquidCrystal::command(unsigned char)>

000013be <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>:
_ZN13LiquidCrystal5beginEhhh():
    13be:	0f 93       	push	r16
    13c0:	1f 93       	push	r17
    13c2:	cf 93       	push	r28
    13c4:	df 93       	push	r29
    13c6:	ec 01       	movw	r28, r24
    13c8:	42 30       	cpi	r20, 0x02	; 2
    13ca:	18 f0       	brcs	.+6      	; 0x13d2 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x14>
    13cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ce:	88 60       	ori	r24, 0x08	; 8
    13d0:	8f 87       	std	Y+15, r24	; 0x0f
    13d2:	4b 8b       	std	Y+19, r20	; 0x13
_ZN13LiquidCrystal13setRowOffsetsEiiii():
    13d4:	1c 8a       	std	Y+20, r1	; 0x14
    13d6:	80 e4       	ldi	r24, 0x40	; 64
    13d8:	8d 8b       	std	Y+21, r24	; 0x15
    13da:	6e 8b       	std	Y+22, r22	; 0x16
    13dc:	60 5c       	subi	r22, 0xC0	; 192
    13de:	6f 8b       	std	Y+23, r22	; 0x17
_ZN13LiquidCrystal5beginEhhh():
    13e0:	22 23       	and	r18, r18
    13e2:	29 f0       	breq	.+10     	; 0x13ee <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x30>
    13e4:	41 30       	cpi	r20, 0x01	; 1
    13e6:	19 f4       	brne	.+6      	; 0x13ee <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x30>
    13e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ea:	84 60       	ori	r24, 0x04	; 4
    13ec:	8f 87       	std	Y+15, r24	; 0x0f
    13ee:	61 e0       	ldi	r22, 0x01	; 1
    13f0:	8c 81       	ldd	r24, Y+4	; 0x04
    13f2:	0e 94 b1 0b 	call	0x1762	; 0x1762 <pinMode>
    13f6:	8d 81       	ldd	r24, Y+5	; 0x05
    13f8:	8f 3f       	cpi	r24, 0xFF	; 255
    13fa:	19 f0       	breq	.+6      	; 0x1402 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x44>
    13fc:	61 e0       	ldi	r22, 0x01	; 1
    13fe:	0e 94 b1 0b 	call	0x1762	; 0x1762 <pinMode>
    1402:	61 e0       	ldi	r22, 0x01	; 1
    1404:	8e 81       	ldd	r24, Y+6	; 0x06
    1406:	0e 94 b1 0b 	call	0x1762	; 0x1762 <pinMode>
    140a:	8e 01       	movw	r16, r28
    140c:	98 01       	movw	r18, r16
    140e:	2c 1b       	sub	r18, r28
    1410:	3d 0b       	sbc	r19, r29
    1412:	8f 85       	ldd	r24, Y+15	; 0x0f
    1414:	84 fd       	sbrc	r24, 4
    1416:	0d c0       	rjmp	.+26     	; 0x1432 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x74>
    1418:	84 e0       	ldi	r24, 0x04	; 4
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	0f 5f       	subi	r16, 0xFF	; 255
    141e:	1f 4f       	sbci	r17, 0xFF	; 255
    1420:	28 17       	cp	r18, r24
    1422:	39 07       	cpc	r19, r25
    1424:	4c f4       	brge	.+18     	; 0x1438 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x7a>
    1426:	61 e0       	ldi	r22, 0x01	; 1
    1428:	f8 01       	movw	r30, r16
    142a:	86 81       	ldd	r24, Z+6	; 0x06
    142c:	0e 94 b1 0b 	call	0x1762	; 0x1762 <pinMode>
    1430:	ed cf       	rjmp	.-38     	; 0x140c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x4e>
    1432:	88 e0       	ldi	r24, 0x08	; 8
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	f2 cf       	rjmp	.-28     	; 0x141c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x5e>
    1438:	80 e5       	ldi	r24, 0x50	; 80
    143a:	93 ec       	ldi	r25, 0xC3	; 195
    143c:	0e 94 55 0b 	call	0x16aa	; 0x16aa <delayMicroseconds>
    1440:	60 e0       	ldi	r22, 0x00	; 0
    1442:	8c 81       	ldd	r24, Y+4	; 0x04
    1444:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	8e 81       	ldd	r24, Y+6	; 0x06
    144c:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
    1450:	8d 81       	ldd	r24, Y+5	; 0x05
    1452:	8f 3f       	cpi	r24, 0xFF	; 255
    1454:	19 f0       	breq	.+6      	; 0x145c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x9e>
    1456:	60 e0       	ldi	r22, 0x00	; 0
    1458:	0e 94 ed 0b 	call	0x17da	; 0x17da <digitalWrite>
    145c:	6f 85       	ldd	r22, Y+15	; 0x0f
    145e:	64 fd       	sbrc	r22, 4
    1460:	33 c0       	rjmp	.+102    	; 0x14c8 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x10a>
    1462:	63 e0       	ldi	r22, 0x03	; 3
    1464:	ce 01       	movw	r24, r28
    1466:	0e 94 39 09 	call	0x1272	; 0x1272 <LiquidCrystal::write4bits(unsigned char)>
    146a:	84 e9       	ldi	r24, 0x94	; 148
    146c:	91 e1       	ldi	r25, 0x11	; 17
    146e:	0e 94 55 0b 	call	0x16aa	; 0x16aa <delayMicroseconds>
    1472:	63 e0       	ldi	r22, 0x03	; 3
    1474:	ce 01       	movw	r24, r28
    1476:	0e 94 39 09 	call	0x1272	; 0x1272 <LiquidCrystal::write4bits(unsigned char)>
    147a:	84 e9       	ldi	r24, 0x94	; 148
    147c:	91 e1       	ldi	r25, 0x11	; 17
    147e:	0e 94 55 0b 	call	0x16aa	; 0x16aa <delayMicroseconds>
    1482:	63 e0       	ldi	r22, 0x03	; 3
    1484:	ce 01       	movw	r24, r28
    1486:	0e 94 39 09 	call	0x1272	; 0x1272 <LiquidCrystal::write4bits(unsigned char)>
    148a:	86 e9       	ldi	r24, 0x96	; 150
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	0e 94 55 0b 	call	0x16aa	; 0x16aa <delayMicroseconds>
    1492:	62 e0       	ldi	r22, 0x02	; 2
    1494:	ce 01       	movw	r24, r28
    1496:	0e 94 39 09 	call	0x1272	; 0x1272 <LiquidCrystal::write4bits(unsigned char)>
    149a:	6f 85       	ldd	r22, Y+15	; 0x0f
    149c:	60 62       	ori	r22, 0x20	; 32
    149e:	ce 01       	movw	r24, r28
    14a0:	0e 94 bc 09 	call	0x1378	; 0x1378 <LiquidCrystal::command(unsigned char)>
    14a4:	84 e0       	ldi	r24, 0x04	; 4
    14a6:	88 8b       	std	Y+16, r24	; 0x10
    14a8:	ce 01       	movw	r24, r28
    14aa:	0e 94 d7 09 	call	0x13ae	; 0x13ae <LiquidCrystal::display()>
    14ae:	ce 01       	movw	r24, r28
    14b0:	0e 94 bf 09 	call	0x137e	; 0x137e <LiquidCrystal::clear()>
    14b4:	82 e0       	ldi	r24, 0x02	; 2
    14b6:	89 8b       	std	Y+17, r24	; 0x11
    14b8:	66 e0       	ldi	r22, 0x06	; 6
    14ba:	ce 01       	movw	r24, r28
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	1f 91       	pop	r17
    14c2:	0f 91       	pop	r16
    14c4:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <LiquidCrystal::command(unsigned char)>
    14c8:	60 62       	ori	r22, 0x20	; 32
    14ca:	ce 01       	movw	r24, r28
    14cc:	0e 94 bc 09 	call	0x1378	; 0x1378 <LiquidCrystal::command(unsigned char)>
    14d0:	84 e9       	ldi	r24, 0x94	; 148
    14d2:	91 e1       	ldi	r25, 0x11	; 17
    14d4:	0e 94 55 0b 	call	0x16aa	; 0x16aa <delayMicroseconds>
    14d8:	6f 85       	ldd	r22, Y+15	; 0x0f
    14da:	60 62       	ori	r22, 0x20	; 32
    14dc:	ce 01       	movw	r24, r28
    14de:	0e 94 bc 09 	call	0x1378	; 0x1378 <LiquidCrystal::command(unsigned char)>
    14e2:	86 e9       	ldi	r24, 0x96	; 150
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	0e 94 55 0b 	call	0x16aa	; 0x16aa <delayMicroseconds>
    14ea:	6f 85       	ldd	r22, Y+15	; 0x0f
    14ec:	60 62       	ori	r22, 0x20	; 32
    14ee:	ce 01       	movw	r24, r28
    14f0:	0e 94 bc 09 	call	0x1378	; 0x1378 <LiquidCrystal::command(unsigned char)>
    14f4:	d2 cf       	rjmp	.-92     	; 0x149a <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xdc>

000014f6 <LiquidCrystal::LiquidCrystal(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_ZN13LiquidCrystalC2Ehhhhhh():
    14f6:	cf 92       	push	r12
    14f8:	ef 92       	push	r14
    14fa:	0f 93       	push	r16
    14fc:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
    14fe:	13 82       	std	Z+3, r1	; 0x03
    1500:	12 82       	std	Z+2, r1	; 0x02
_ZN13LiquidCrystalC2Ehhhhhh():
    1502:	80 e5       	ldi	r24, 0x50	; 80
    1504:	96 e0       	ldi	r25, 0x06	; 6
    1506:	91 83       	std	Z+1, r25	; 0x01
    1508:	80 83       	st	Z, r24
_ZN13LiquidCrystal4initEhhhhhhhhhhhh():
    150a:	64 83       	std	Z+4, r22	; 0x04
    150c:	8f ef       	ldi	r24, 0xFF	; 255
    150e:	85 83       	std	Z+5, r24	; 0x05
    1510:	46 83       	std	Z+6, r20	; 0x06
    1512:	27 83       	std	Z+7, r18	; 0x07
    1514:	00 87       	std	Z+8, r16	; 0x08
    1516:	e1 86       	std	Z+9, r14	; 0x09
    1518:	c2 86       	std	Z+10, r12	; 0x0a
    151a:	13 86       	std	Z+11, r1	; 0x0b
    151c:	14 86       	std	Z+12, r1	; 0x0c
    151e:	15 86       	std	Z+13, r1	; 0x0d
    1520:	16 86       	std	Z+14, r1	; 0x0e
    1522:	17 86       	std	Z+15, r1	; 0x0f
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	41 e0       	ldi	r20, 0x01	; 1
    1528:	60 e1       	ldi	r22, 0x10	; 16
    152a:	cf 01       	movw	r24, r30
_ZN13LiquidCrystalC2Ehhhhhh():
    152c:	0f 91       	pop	r16
    152e:	ef 90       	pop	r14
    1530:	cf 90       	pop	r12
_ZN13LiquidCrystal4initEhhhhhhhhhhhh():
    1532:	0c 94 df 09 	jmp	0x13be	; 0x13be <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>

00001536 <LiquidCrystal::write(unsigned char)>:
_ZN13LiquidCrystal5writeEh():
/Applications/Arduino.app/Contents/Java/libraries/LiquidCrystal/src/LiquidCrystal.cpp:280
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    1536:	41 e0       	ldi	r20, 0x01	; 1
    1538:	0e 94 93 09 	call	0x1326	; 0x1326 <LiquidCrystal::send(unsigned char, unsigned char)>
/Applications/Arduino.app/Contents/Java/libraries/LiquidCrystal/src/LiquidCrystal.cpp:282
  return 1; // assume sucess
}
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	08 95       	ret

00001542 <__vector_16>:
__vector_16():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1542:	1f 92       	push	r1
    1544:	0f 92       	push	r0
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	0f 92       	push	r0
    154a:	11 24       	eor	r1, r1
    154c:	2f 93       	push	r18
    154e:	3f 93       	push	r19
    1550:	8f 93       	push	r24
    1552:	9f 93       	push	r25
    1554:	af 93       	push	r26
    1556:	bf 93       	push	r27
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    1558:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <timer0_millis>
    155c:	90 91 a7 06 	lds	r25, 0x06A7	; 0x8006a7 <timer0_millis+0x1>
    1560:	a0 91 a8 06 	lds	r26, 0x06A8	; 0x8006a8 <timer0_millis+0x2>
    1564:	b0 91 a9 06 	lds	r27, 0x06A9	; 0x8006a9 <timer0_millis+0x3>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    1568:	30 91 a5 06 	lds	r19, 0x06A5	; 0x8006a5 <timer0_fract>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    156c:	23 e0       	ldi	r18, 0x03	; 3
    156e:	23 0f       	add	r18, r19
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    1570:	2d 37       	cpi	r18, 0x7D	; 125
    1572:	68 f1       	brcs	.+90     	; 0x15ce <__vector_16+0x8c>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    1574:	26 e8       	ldi	r18, 0x86	; 134
    1576:	23 0f       	add	r18, r19
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    1578:	02 96       	adiw	r24, 0x02	; 2
    157a:	a1 1d       	adc	r26, r1
    157c:	b1 1d       	adc	r27, r1
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    157e:	20 93 a5 06 	sts	0x06A5, r18	; 0x8006a5 <timer0_fract>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    1582:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <timer0_millis>
    1586:	90 93 a7 06 	sts	0x06A7, r25	; 0x8006a7 <timer0_millis+0x1>
    158a:	a0 93 a8 06 	sts	0x06A8, r26	; 0x8006a8 <timer0_millis+0x2>
    158e:	b0 93 a9 06 	sts	0x06A9, r27	; 0x8006a9 <timer0_millis+0x3>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    1592:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <timer0_overflow_count>
    1596:	90 91 a2 06 	lds	r25, 0x06A2	; 0x8006a2 <timer0_overflow_count+0x1>
    159a:	a0 91 a3 06 	lds	r26, 0x06A3	; 0x8006a3 <timer0_overflow_count+0x2>
    159e:	b0 91 a4 06 	lds	r27, 0x06A4	; 0x8006a4 <timer0_overflow_count+0x3>
    15a2:	01 96       	adiw	r24, 0x01	; 1
    15a4:	a1 1d       	adc	r26, r1
    15a6:	b1 1d       	adc	r27, r1
    15a8:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <timer0_overflow_count>
    15ac:	90 93 a2 06 	sts	0x06A2, r25	; 0x8006a2 <timer0_overflow_count+0x1>
    15b0:	a0 93 a3 06 	sts	0x06A3, r26	; 0x8006a3 <timer0_overflow_count+0x2>
    15b4:	b0 93 a4 06 	sts	0x06A4, r27	; 0x8006a4 <timer0_overflow_count+0x3>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:213
#endif
}
    15b8:	bf 91       	pop	r27
    15ba:	af 91       	pop	r26
    15bc:	9f 91       	pop	r25
    15be:	8f 91       	pop	r24
    15c0:	3f 91       	pop	r19
    15c2:	2f 91       	pop	r18
    15c4:	0f 90       	pop	r0
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	0f 90       	pop	r0
    15ca:	1f 90       	pop	r1
    15cc:	18 95       	reti
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    15ce:	01 96       	adiw	r24, 0x01	; 1
    15d0:	a1 1d       	adc	r26, r1
    15d2:	b1 1d       	adc	r27, r1
    15d4:	d4 cf       	rjmp	.-88     	; 0x157e <__vector_16+0x3c>

000015d6 <millis>:
millis():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    15d6:	2f b7       	in	r18, 0x3f	; 63
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    15d8:	f8 94       	cli
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    15da:	60 91 a6 06 	lds	r22, 0x06A6	; 0x8006a6 <timer0_millis>
    15de:	70 91 a7 06 	lds	r23, 0x06A7	; 0x8006a7 <timer0_millis+0x1>
    15e2:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <timer0_millis+0x2>
    15e6:	90 91 a9 06 	lds	r25, 0x06A9	; 0x8006a9 <timer0_millis+0x3>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    15ea:	2f bf       	out	0x3f, r18	; 63
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:227

  return m;
}
    15ec:	08 95       	ret

000015ee <micros>:
micros():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    15ee:	3f b7       	in	r19, 0x3f	; 63
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    15f0:	f8 94       	cli
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    15f2:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <timer0_overflow_count>
    15f6:	90 91 a2 06 	lds	r25, 0x06A2	; 0x8006a2 <timer0_overflow_count+0x1>
    15fa:	a0 91 a3 06 	lds	r26, 0x06A3	; 0x8006a3 <timer0_overflow_count+0x2>
    15fe:	b0 91 a4 06 	lds	r27, 0x06A4	; 0x8006a4 <timer0_overflow_count+0x3>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    1602:	26 b5       	in	r18, 0x26	; 38
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1604:	a8 9b       	sbis	0x15, 0	; 21
    1606:	05 c0       	rjmp	.+10     	; 0x1612 <micros+0x24>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:261 (discriminator 1)
    1608:	2f 3f       	cpi	r18, 0xFF	; 255
    160a:	19 f0       	breq	.+6      	; 0x1612 <micros+0x24>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    160c:	01 96       	adiw	r24, 0x01	; 1
    160e:	a1 1d       	adc	r26, r1
    1610:	b1 1d       	adc	r27, r1
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    1612:	3f bf       	out	0x3f, r19	; 63
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    1614:	ba 2f       	mov	r27, r26
    1616:	a9 2f       	mov	r26, r25
    1618:	98 2f       	mov	r25, r24
    161a:	88 27       	eor	r24, r24
    161c:	bc 01       	movw	r22, r24
    161e:	cd 01       	movw	r24, r26
    1620:	62 0f       	add	r22, r18
    1622:	71 1d       	adc	r23, r1
    1624:	81 1d       	adc	r24, r1
    1626:	91 1d       	adc	r25, r1
    1628:	42 e0       	ldi	r20, 0x02	; 2
    162a:	66 0f       	add	r22, r22
    162c:	77 1f       	adc	r23, r23
    162e:	88 1f       	adc	r24, r24
    1630:	99 1f       	adc	r25, r25
    1632:	4a 95       	dec	r20
    1634:	d1 f7       	brne	.-12     	; 0x162a <micros+0x3c>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    1636:	08 95       	ret

00001638 <delay>:
delay():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    1638:	8f 92       	push	r8
    163a:	9f 92       	push	r9
    163c:	af 92       	push	r10
    163e:	bf 92       	push	r11
    1640:	cf 92       	push	r12
    1642:	df 92       	push	r13
    1644:	ef 92       	push	r14
    1646:	ff 92       	push	r15
    1648:	6b 01       	movw	r12, r22
    164a:	7c 01       	movw	r14, r24
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    164c:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <micros>
    1650:	4b 01       	movw	r8, r22
    1652:	5c 01       	movw	r10, r24
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
    1654:	c1 14       	cp	r12, r1
    1656:	d1 04       	cpc	r13, r1
    1658:	e1 04       	cpc	r14, r1
    165a:	f1 04       	cpc	r15, r1
    165c:	e9 f0       	breq	.+58     	; 0x1698 <delay+0x60>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:400
    yield();
    165e:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <yield>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    1662:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <micros>
    1666:	68 19       	sub	r22, r8
    1668:	79 09       	sbc	r23, r9
    166a:	8a 09       	sbc	r24, r10
    166c:	9b 09       	sbc	r25, r11
    166e:	68 3e       	cpi	r22, 0xE8	; 232
    1670:	73 40       	sbci	r23, 0x03	; 3
    1672:	81 05       	cpc	r24, r1
    1674:	91 05       	cpc	r25, r1
    1676:	70 f3       	brcs	.-36     	; 0x1654 <delay+0x1c>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:402
      ms--;
    1678:	21 e0       	ldi	r18, 0x01	; 1
    167a:	c2 1a       	sub	r12, r18
    167c:	d1 08       	sbc	r13, r1
    167e:	e1 08       	sbc	r14, r1
    1680:	f1 08       	sbc	r15, r1
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    1682:	88 ee       	ldi	r24, 0xE8	; 232
    1684:	88 0e       	add	r8, r24
    1686:	83 e0       	ldi	r24, 0x03	; 3
    1688:	98 1e       	adc	r9, r24
    168a:	a1 1c       	adc	r10, r1
    168c:	b1 1c       	adc	r11, r1
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    168e:	c1 14       	cp	r12, r1
    1690:	d1 04       	cpc	r13, r1
    1692:	e1 04       	cpc	r14, r1
    1694:	f1 04       	cpc	r15, r1
    1696:	29 f7       	brne	.-54     	; 0x1662 <delay+0x2a>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    1698:	ff 90       	pop	r15
    169a:	ef 90       	pop	r14
    169c:	df 90       	pop	r13
    169e:	cf 90       	pop	r12
    16a0:	bf 90       	pop	r11
    16a2:	af 90       	pop	r10
    16a4:	9f 90       	pop	r9
    16a6:	8f 90       	pop	r8
    16a8:	08 95       	ret

000016aa <delayMicroseconds>:
delayMicroseconds():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
    16aa:	82 30       	cpi	r24, 0x02	; 2
    16ac:	91 05       	cpc	r25, r1
    16ae:	38 f0       	brcs	.+14     	; 0x16be <delayMicroseconds+0x14>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	88 0f       	add	r24, r24
    16b6:	99 1f       	adc	r25, r25
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
    16b8:	05 97       	sbiw	r24, 0x05	; 5
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    16ba:	01 97       	sbiw	r24, 0x01	; 1
    16bc:	f1 f7       	brne	.-4      	; 0x16ba <delayMicroseconds+0x10>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    16be:	08 95       	ret

000016c0 <init>:
init():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    16c0:	78 94       	sei
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    16c2:	84 b5       	in	r24, 0x24	; 36
    16c4:	83 60       	ori	r24, 0x03	; 3
    16c6:	84 bd       	out	0x24, r24	; 36
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    16c8:	85 b5       	in	r24, 0x25	; 37
    16ca:	83 60       	ori	r24, 0x03	; 3
    16cc:	85 bd       	out	0x25, r24	; 37
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    16ce:	ee e6       	ldi	r30, 0x6E	; 110
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	81 60       	ori	r24, 0x01	; 1
    16d6:	80 83       	st	Z, r24
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    16d8:	e1 e8       	ldi	r30, 0x81	; 129
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	82 e0       	ldi	r24, 0x02	; 2
    16de:	80 83       	st	Z, r24
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    16e0:	80 81       	ld	r24, Z
    16e2:	81 60       	ori	r24, 0x01	; 1
    16e4:	80 83       	st	Z, r24
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    16e6:	e0 e8       	ldi	r30, 0x80	; 128
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	81 60       	ori	r24, 0x01	; 1
    16ee:	80 83       	st	Z, r24
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    16f0:	e1 eb       	ldi	r30, 0xB1	; 177
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	84 60       	ori	r24, 0x04	; 4
    16f8:	80 83       	st	Z, r24
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    16fa:	e0 eb       	ldi	r30, 0xB0	; 176
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	81 60       	ori	r24, 0x01	; 1
    1702:	80 83       	st	Z, r24
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    1704:	87 e8       	ldi	r24, 0x87	; 135
    1706:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    170a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring.c:1072
#endif
}
    170e:	08 95       	ret

00001710 <turnOffPWM>:
turnOffPWM():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    1710:	84 30       	cpi	r24, 0x04	; 4
    1712:	81 f0       	breq	.+32     	; 0x1734 <turnOffPWM+0x24>
    1714:	28 f4       	brcc	.+10     	; 0x1720 <turnOffPWM+0x10>
    1716:	82 30       	cpi	r24, 0x02	; 2
    1718:	e9 f0       	breq	.+58     	; 0x1754 <turnOffPWM+0x44>
    171a:	83 30       	cpi	r24, 0x03	; 3
    171c:	f9 f0       	breq	.+62     	; 0x175c <turnOffPWM+0x4c>
    171e:	08 95       	ret
    1720:	88 30       	cpi	r24, 0x08	; 8
    1722:	71 f0       	breq	.+28     	; 0x1740 <turnOffPWM+0x30>
    1724:	89 30       	cpi	r24, 0x09	; 9
    1726:	91 f0       	breq	.+36     	; 0x174c <turnOffPWM+0x3c>
    1728:	85 30       	cpi	r24, 0x05	; 5
    172a:	b9 f4       	brne	.+46     	; 0x175a <turnOffPWM+0x4a>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    172c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1730:	8f 7d       	andi	r24, 0xDF	; 223
    1732:	03 c0       	rjmp	.+6      	; 0x173a <turnOffPWM+0x2a>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    1734:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1738:	8f 77       	andi	r24, 0x7F	; 127
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    173a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:88
        break;
    173e:	08 95       	ret
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    1740:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1744:	8f 77       	andi	r24, 0x7F	; 127
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    1746:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:110
        break;
    174a:	08 95       	ret
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    174c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1750:	8f 7d       	andi	r24, 0xDF	; 223
    1752:	f9 cf       	rjmp	.-14     	; 0x1746 <turnOffPWM+0x36>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    1754:	84 b5       	in	r24, 0x24	; 36
    1756:	8f 77       	andi	r24, 0x7F	; 127
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    1758:	84 bd       	out	0x24, r24	; 36
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    175a:	08 95       	ret
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    175c:	84 b5       	in	r24, 0x24	; 36
    175e:	8f 7d       	andi	r24, 0xDF	; 223
    1760:	fb cf       	rjmp	.-10     	; 0x1758 <turnOffPWM+0x48>

00001762 <pinMode>:
pinMode():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1762:	cf 93       	push	r28
    1764:	df 93       	push	r29
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	fc 01       	movw	r30, r24
    176a:	e1 58       	subi	r30, 0x81	; 129
    176c:	ff 4f       	sbci	r31, 0xFF	; 255
    176e:	24 91       	lpm	r18, Z
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    1770:	8a 56       	subi	r24, 0x6A	; 106
    1772:	9f 4f       	sbci	r25, 0xFF	; 255
    1774:	fc 01       	movw	r30, r24
    1776:	84 91       	lpm	r24, Z
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    1778:	88 23       	and	r24, r24
    177a:	c9 f0       	breq	.+50     	; 0x17ae <pinMode+0x4c>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	88 0f       	add	r24, r24
    1780:	99 1f       	adc	r25, r25
    1782:	fc 01       	movw	r30, r24
    1784:	ef 53       	subi	r30, 0x3F	; 63
    1786:	ff 4f       	sbci	r31, 0xFF	; 255
    1788:	a5 91       	lpm	r26, Z+
    178a:	b4 91       	lpm	r27, Z
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    178c:	fc 01       	movw	r30, r24
    178e:	e9 54       	subi	r30, 0x49	; 73
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	c5 91       	lpm	r28, Z+
    1794:	d4 91       	lpm	r29, Z
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    1796:	61 11       	cpse	r22, r1
    1798:	0d c0       	rjmp	.+26     	; 0x17b4 <pinMode+0x52>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    179a:	9f b7       	in	r25, 0x3f	; 63
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
    179c:	f8 94       	cli
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    179e:	8c 91       	ld	r24, X
    17a0:	20 95       	com	r18
    17a2:	82 23       	and	r24, r18
    17a4:	8c 93       	st	X, r24
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    17a6:	88 81       	ld	r24, Y
    17a8:	28 23       	and	r18, r24
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    17aa:	28 83       	st	Y, r18
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    17ac:	9f bf       	out	0x3f, r25	; 63
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    17ae:	df 91       	pop	r29
    17b0:	cf 91       	pop	r28
    17b2:	08 95       	ret
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    17b4:	62 30       	cpi	r22, 0x02	; 2
    17b6:	51 f4       	brne	.+20     	; 0x17cc <pinMode+0x6a>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    17b8:	9f b7       	in	r25, 0x3f	; 63
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
    17ba:	f8 94       	cli
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    17bc:	3c 91       	ld	r19, X
    17be:	82 2f       	mov	r24, r18
    17c0:	80 95       	com	r24
    17c2:	83 23       	and	r24, r19
    17c4:	8c 93       	st	X, r24
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    17c6:	e8 81       	ld	r30, Y
    17c8:	2e 2b       	or	r18, r30
    17ca:	ef cf       	rjmp	.-34     	; 0x17aa <pinMode+0x48>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    17cc:	8f b7       	in	r24, 0x3f	; 63
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
    17ce:	f8 94       	cli
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    17d0:	ec 91       	ld	r30, X
    17d2:	2e 2b       	or	r18, r30
    17d4:	2c 93       	st	X, r18
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    17d6:	8f bf       	out	0x3f, r24	; 63
    17d8:	ea cf       	rjmp	.-44     	; 0x17ae <pinMode+0x4c>

000017da <digitalWrite>:
digitalWrite():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    17da:	1f 93       	push	r17
    17dc:	cf 93       	push	r28
    17de:	df 93       	push	r29
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	f9 01       	movw	r30, r18
    17e6:	e8 59       	subi	r30, 0x98	; 152
    17e8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ea:	84 91       	lpm	r24, Z
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    17ec:	f9 01       	movw	r30, r18
    17ee:	e1 58       	subi	r30, 0x81	; 129
    17f0:	ff 4f       	sbci	r31, 0xFF	; 255
    17f2:	d4 91       	lpm	r29, Z
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    17f4:	f9 01       	movw	r30, r18
    17f6:	ea 56       	subi	r30, 0x6A	; 106
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	c4 91       	lpm	r28, Z
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    17fc:	cc 23       	and	r28, r28
    17fe:	a9 f0       	breq	.+42     	; 0x182a <digitalWrite+0x50>
    1800:	16 2f       	mov	r17, r22
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1802:	81 11       	cpse	r24, r1
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    1804:	0e 94 88 0b 	call	0x1710	; 0x1710 <turnOffPWM>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    1808:	ec 2f       	mov	r30, r28
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	ee 0f       	add	r30, r30
    180e:	ff 1f       	adc	r31, r31
    1810:	e9 54       	subi	r30, 0x49	; 73
    1812:	ff 4f       	sbci	r31, 0xFF	; 255
    1814:	a5 91       	lpm	r26, Z+
    1816:	b4 91       	lpm	r27, Z
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    1818:	8f b7       	in	r24, 0x3f	; 63
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
    181a:	f8 94       	cli
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    181c:	ec 91       	ld	r30, X
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    181e:	11 11       	cpse	r17, r1
    1820:	08 c0       	rjmp	.+16     	; 0x1832 <digitalWrite+0x58>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    1822:	d0 95       	com	r29
    1824:	de 23       	and	r29, r30
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    1826:	dc 93       	st	X, r29
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    1828:	8f bf       	out	0x3f, r24	; 63
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:212
}
    182a:	df 91       	pop	r29
    182c:	cf 91       	pop	r28
    182e:	1f 91       	pop	r17
    1830:	08 95       	ret
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    1832:	de 2b       	or	r29, r30
    1834:	f8 cf       	rjmp	.-16     	; 0x1826 <digitalWrite+0x4c>

00001836 <digitalRead>:
digitalRead():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    1836:	cf 93       	push	r28
    1838:	df 93       	push	r29
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    183a:	28 2f       	mov	r18, r24
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	f9 01       	movw	r30, r18
    1840:	e8 59       	subi	r30, 0x98	; 152
    1842:	ff 4f       	sbci	r31, 0xFF	; 255
    1844:	84 91       	lpm	r24, Z
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    1846:	f9 01       	movw	r30, r18
    1848:	e1 58       	subi	r30, 0x81	; 129
    184a:	ff 4f       	sbci	r31, 0xFF	; 255
    184c:	d4 91       	lpm	r29, Z
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    184e:	f9 01       	movw	r30, r18
    1850:	ea 56       	subi	r30, 0x6A	; 106
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	c4 91       	lpm	r28, Z
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    1856:	cc 23       	and	r28, r28
    1858:	a1 f0       	breq	.+40     	; 0x1882 <digitalRead+0x4c>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    185a:	81 11       	cpse	r24, r1
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    185c:	0e 94 88 0b 	call	0x1710	; 0x1710 <turnOffPWM>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    1860:	ec 2f       	mov	r30, r28
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	ee 0f       	add	r30, r30
    1866:	ff 1f       	adc	r31, r31
    1868:	e3 55       	subi	r30, 0x53	; 83
    186a:	ff 4f       	sbci	r31, 0xFF	; 255
    186c:	a5 91       	lpm	r26, Z+
    186e:	b4 91       	lpm	r27, Z
    1870:	ec 91       	ld	r30, X
    1872:	ed 23       	and	r30, r29
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	09 f4       	brne	.+2      	; 0x187c <digitalRead+0x46>
    187a:	80 e0       	ldi	r24, 0x00	; 0
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	08 95       	ret
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	fa cf       	rjmp	.-12     	; 0x187c <digitalRead+0x46>

00001888 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1888:	fc 01       	movw	r30, r24
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    188a:	91 8d       	ldd	r25, Z+25	; 0x19
    188c:	22 8d       	ldd	r18, Z+26	; 0x1a
    188e:	89 2f       	mov	r24, r25
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	80 5c       	subi	r24, 0xC0	; 192
    1894:	9f 4f       	sbci	r25, 0xFF	; 255
    1896:	82 1b       	sub	r24, r18
    1898:	91 09       	sbc	r25, r1
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:152
}
    189a:	8f 73       	andi	r24, 0x3F	; 63
    189c:	99 27       	eor	r25, r25
    189e:	08 95       	ret

000018a0 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
    18a0:	fc 01       	movw	r30, r24
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    18a2:	91 8d       	ldd	r25, Z+25	; 0x19
    18a4:	82 8d       	ldd	r24, Z+26	; 0x1a
    18a6:	98 17       	cp	r25, r24
    18a8:	31 f0       	breq	.+12     	; 0x18b6 <HardwareSerial::peek()+0x16>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    18aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    18ac:	e8 0f       	add	r30, r24
    18ae:	f1 1d       	adc	r31, r1
    18b0:	85 8d       	ldd	r24, Z+29	; 0x1d
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	08 95       	ret
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    18b6:	8f ef       	ldi	r24, 0xFF	; 255
    18b8:	9f ef       	ldi	r25, 0xFF	; 255
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    18ba:	08 95       	ret

000018bc <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
    18bc:	fc 01       	movw	r30, r24
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    18be:	91 8d       	ldd	r25, Z+25	; 0x19
    18c0:	82 8d       	ldd	r24, Z+26	; 0x1a
    18c2:	98 17       	cp	r25, r24
    18c4:	61 f0       	breq	.+24     	; 0x18de <HardwareSerial::read()+0x22>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    18c6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    18c8:	ae 0f       	add	r26, r30
    18ca:	bf 2f       	mov	r27, r31
    18cc:	b1 1d       	adc	r27, r1
    18ce:	5d 96       	adiw	r26, 0x1d	; 29
    18d0:	8c 91       	ld	r24, X
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    18d2:	92 8d       	ldd	r25, Z+26	; 0x1a
    18d4:	9f 5f       	subi	r25, 0xFF	; 255
    18d6:	9f 73       	andi	r25, 0x3F	; 63
    18d8:	92 8f       	std	Z+26, r25	; 0x1a
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	08 95       	ret
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    18de:	8f ef       	ldi	r24, 0xFF	; 255
    18e0:	9f ef       	ldi	r25, 0xFF	; 255
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    18e2:	08 95       	ret

000018e4 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    18e4:	fc 01       	movw	r30, r24
    18e6:	53 8d       	ldd	r21, Z+27	; 0x1b
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    18e8:	44 8d       	ldd	r20, Z+28	; 0x1c
    18ea:	25 2f       	mov	r18, r21
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	84 2f       	mov	r24, r20
    18f0:	90 e0       	ldi	r25, 0x00	; 0
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    18f2:	82 1b       	sub	r24, r18
    18f4:	93 0b       	sbc	r25, r19
    18f6:	54 17       	cp	r21, r20
    18f8:	10 f0       	brcs	.+4      	; 0x18fe <HardwareSerial::availableForWrite()+0x1a>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
    18fa:	cf 96       	adiw	r24, 0x3f	; 63
    18fc:	08 95       	ret
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    18fe:	01 97       	sbiw	r24, 0x01	; 1
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:188
}
    1900:	08 95       	ret

00001902 <serialEventRun()>:
_Z14serialEventRunv():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1902:	87 ec       	ldi	r24, 0xC7	; 199
    1904:	9d e0       	ldi	r25, 0x0D	; 13
    1906:	89 2b       	or	r24, r25
    1908:	49 f0       	breq	.+18     	; 0x191c <serialEventRun()+0x1a>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	89 2b       	or	r24, r25
    1910:	29 f0       	breq	.+10     	; 0x191c <serialEventRun()+0x1a>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
    1912:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <Serial0_available()>
    1916:	81 11       	cpse	r24, r1
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:66
    1918:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    191c:	08 95       	ret

0000191e <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    191e:	fc 01       	movw	r30, r24
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1920:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1922:	a8 0f       	add	r26, r24
    1924:	b9 2f       	mov	r27, r25
    1926:	b1 1d       	adc	r27, r1
    1928:	a3 5a       	subi	r26, 0xA3	; 163
    192a:	bf 4f       	sbci	r27, 0xFF	; 255
    192c:	2c 91       	ld	r18, X
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    192e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	01 96       	adiw	r24, 0x01	; 1
    1934:	8f 73       	andi	r24, 0x3F	; 63
    1936:	99 27       	eor	r25, r25
    1938:	84 8f       	std	Z+28, r24	; 0x1c
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    193a:	a6 89       	ldd	r26, Z+22	; 0x16
    193c:	b7 89       	ldd	r27, Z+23	; 0x17
    193e:	2c 93       	st	X, r18
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    1940:	a0 89       	ldd	r26, Z+16	; 0x10
    1942:	b1 89       	ldd	r27, Z+17	; 0x11
    1944:	8c 91       	ld	r24, X
    1946:	80 64       	ori	r24, 0x40	; 64
    1948:	8c 93       	st	X, r24
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    194a:	93 8d       	ldd	r25, Z+27	; 0x1b
    194c:	84 8d       	ldd	r24, Z+28	; 0x1c
    194e:	98 13       	cpse	r25, r24
    1950:	06 c0       	rjmp	.+12     	; 0x195e <HardwareSerial::_tx_udr_empty_irq()+0x40>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    1952:	02 88       	ldd	r0, Z+18	; 0x12
    1954:	f3 89       	ldd	r31, Z+19	; 0x13
    1956:	e0 2d       	mov	r30, r0
    1958:	80 81       	ld	r24, Z
    195a:	8f 7d       	andi	r24, 0xDF	; 223
    195c:	80 83       	st	Z, r24
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    195e:	08 95       	ret

00001960 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1960:	cf 93       	push	r28
    1962:	df 93       	push	r29
    1964:	ec 01       	movw	r28, r24
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1966:	88 8d       	ldd	r24, Y+24	; 0x18
    1968:	88 23       	and	r24, r24
    196a:	b9 f0       	breq	.+46     	; 0x199a <HardwareSerial::flush()+0x3a>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    196c:	aa 89       	ldd	r26, Y+18	; 0x12
    196e:	bb 89       	ldd	r27, Y+19	; 0x13
    1970:	e8 89       	ldd	r30, Y+16	; 0x10
    1972:	f9 89       	ldd	r31, Y+17	; 0x11
    1974:	8c 91       	ld	r24, X
    1976:	85 fd       	sbrc	r24, 5
    1978:	03 c0       	rjmp	.+6      	; 0x1980 <HardwareSerial::flush()+0x20>
    197a:	80 81       	ld	r24, Z
    197c:	86 fd       	sbrc	r24, 6
    197e:	0d c0       	rjmp	.+26     	; 0x199a <HardwareSerial::flush()+0x3a>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1980:	0f b6       	in	r0, 0x3f	; 63
    1982:	07 fc       	sbrc	r0, 7
    1984:	f7 cf       	rjmp	.-18     	; 0x1974 <HardwareSerial::flush()+0x14>
    1986:	8c 91       	ld	r24, X
    1988:	85 ff       	sbrs	r24, 5
    198a:	f2 cf       	rjmp	.-28     	; 0x1970 <HardwareSerial::flush()+0x10>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    198c:	80 81       	ld	r24, Z
    198e:	85 ff       	sbrs	r24, 5
    1990:	ed cf       	rjmp	.-38     	; 0x196c <HardwareSerial::flush()+0xc>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    1992:	ce 01       	movw	r24, r28
    1994:	0e 94 8f 0c 	call	0x191e	; 0x191e <HardwareSerial::_tx_udr_empty_irq()>
    1998:	e9 cf       	rjmp	.-46     	; 0x196c <HardwareSerial::flush()+0xc>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    199a:	df 91       	pop	r29
    199c:	cf 91       	pop	r28
    199e:	08 95       	ret

000019a0 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
    19a0:	ef 92       	push	r14
    19a2:	ff 92       	push	r15
    19a4:	0f 93       	push	r16
    19a6:	1f 93       	push	r17
    19a8:	cf 93       	push	r28
    19aa:	df 93       	push	r29
    19ac:	ec 01       	movw	r28, r24
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	88 8f       	std	Y+24, r24	; 0x18
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    19b2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    19b4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19b6:	98 13       	cpse	r25, r24
    19b8:	16 c0       	rjmp	.+44     	; 0x19e6 <HardwareSerial::write(unsigned char)+0x46>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
    19ba:	e8 89       	ldd	r30, Y+16	; 0x10
    19bc:	f9 89       	ldd	r31, Y+17	; 0x11
    19be:	80 81       	ld	r24, Z
    19c0:	85 ff       	sbrs	r24, 5
    19c2:	11 c0       	rjmp	.+34     	; 0x19e6 <HardwareSerial::write(unsigned char)+0x46>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    19c4:	ee 89       	ldd	r30, Y+22	; 0x16
    19c6:	ff 89       	ldd	r31, Y+23	; 0x17
    19c8:	60 83       	st	Z, r22
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    19ca:	e8 89       	ldd	r30, Y+16	; 0x10
    19cc:	f9 89       	ldd	r31, Y+17	; 0x11
    19ce:	80 81       	ld	r24, Z
    19d0:	80 64       	ori	r24, 0x40	; 64
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    19d2:	80 83       	st	Z, r24
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	df 91       	pop	r29
    19da:	cf 91       	pop	r28
    19dc:	1f 91       	pop	r17
    19de:	0f 91       	pop	r16
    19e0:	ff 90       	pop	r15
    19e2:	ef 90       	pop	r14
    19e4:	08 95       	ret
    19e6:	f6 2e       	mov	r15, r22
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    19e8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    19ea:	10 e0       	ldi	r17, 0x00	; 0
    19ec:	0f 5f       	subi	r16, 0xFF	; 255
    19ee:	1f 4f       	sbci	r17, 0xFF	; 255
    19f0:	0f 73       	andi	r16, 0x3F	; 63
    19f2:	11 27       	eor	r17, r17
    19f4:	e0 2e       	mov	r14, r16
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    19f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19f8:	8e 11       	cpse	r24, r14
    19fa:	0c c0       	rjmp	.+24     	; 0x1a14 <HardwareSerial::write(unsigned char)+0x74>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	07 fc       	sbrc	r0, 7
    1a00:	fa cf       	rjmp	.-12     	; 0x19f6 <HardwareSerial::write(unsigned char)+0x56>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1a02:	e8 89       	ldd	r30, Y+16	; 0x10
    1a04:	f9 89       	ldd	r31, Y+17	; 0x11
    1a06:	80 81       	ld	r24, Z
    1a08:	85 ff       	sbrs	r24, 5
    1a0a:	f5 cf       	rjmp	.-22     	; 0x19f6 <HardwareSerial::write(unsigned char)+0x56>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	0e 94 8f 0c 	call	0x191e	; 0x191e <HardwareSerial::_tx_udr_empty_irq()>
    1a12:	f1 cf       	rjmp	.-30     	; 0x19f6 <HardwareSerial::write(unsigned char)+0x56>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1a14:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1a16:	ec 0f       	add	r30, r28
    1a18:	fd 2f       	mov	r31, r29
    1a1a:	f1 1d       	adc	r31, r1
    1a1c:	e3 5a       	subi	r30, 0xA3	; 163
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	f0 82       	st	Z, r15
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    1a22:	0b 8f       	std	Y+27, r16	; 0x1b
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    1a24:	ea 89       	ldd	r30, Y+18	; 0x12
    1a26:	fb 89       	ldd	r31, Y+19	; 0x13
    1a28:	80 81       	ld	r24, Z
    1a2a:	80 62       	ori	r24, 0x20	; 32
    1a2c:	d2 cf       	rjmp	.-92     	; 0x19d2 <HardwareSerial::write(unsigned char)+0x32>

00001a2e <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:104
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1a2e:	cf 92       	push	r12
    1a30:	df 92       	push	r13
    1a32:	ef 92       	push	r14
    1a34:	ff 92       	push	r15
    1a36:	1f 93       	push	r17
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
    1a3c:	ec 01       	movw	r28, r24
    1a3e:	6a 01       	movw	r12, r20
    1a40:	7b 01       	movw	r14, r22
    1a42:	12 2f       	mov	r17, r18
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:107
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1a44:	e8 89       	ldd	r30, Y+16	; 0x10
    1a46:	f9 89       	ldd	r31, Y+17	; 0x11
    1a48:	82 e0       	ldi	r24, 0x02	; 2
    1a4a:	80 83       	st	Z, r24
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:114
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1a4c:	c1 14       	cp	r12, r1
    1a4e:	81 ee       	ldi	r24, 0xE1	; 225
    1a50:	d8 06       	cpc	r13, r24
    1a52:	e1 04       	cpc	r14, r1
    1a54:	f1 04       	cpc	r15, r1
    1a56:	a1 f0       	breq	.+40     	; 0x1a80 <HardwareSerial::begin(unsigned long, unsigned char)+0x52>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:106 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1a58:	60 e0       	ldi	r22, 0x00	; 0
    1a5a:	79 e0       	ldi	r23, 0x09	; 9
    1a5c:	8d e3       	ldi	r24, 0x3D	; 61
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	a7 01       	movw	r20, r14
    1a62:	96 01       	movw	r18, r12
    1a64:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__udivmodsi4>
    1a68:	21 50       	subi	r18, 0x01	; 1
    1a6a:	31 09       	sbc	r19, r1
    1a6c:	41 09       	sbc	r20, r1
    1a6e:	51 09       	sbc	r21, r1
    1a70:	56 95       	lsr	r21
    1a72:	47 95       	ror	r20
    1a74:	37 95       	ror	r19
    1a76:	27 95       	ror	r18
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:114 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1a78:	21 15       	cp	r18, r1
    1a7a:	80 e1       	ldi	r24, 0x10	; 16
    1a7c:	38 07       	cpc	r19, r24
    1a7e:	98 f0       	brcs	.+38     	; 0x1aa6 <HardwareSerial::begin(unsigned long, unsigned char)+0x78>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:116
  {
    *_ucsra = 0;
    1a80:	e8 89       	ldd	r30, Y+16	; 0x10
    1a82:	f9 89       	ldd	r31, Y+17	; 0x11
    1a84:	10 82       	st	Z, r1
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1a86:	60 e8       	ldi	r22, 0x80	; 128
    1a88:	74 e8       	ldi	r23, 0x84	; 132
    1a8a:	8e e1       	ldi	r24, 0x1E	; 30
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	a7 01       	movw	r20, r14
    1a90:	96 01       	movw	r18, r12
    1a92:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__udivmodsi4>
    1a96:	21 50       	subi	r18, 0x01	; 1
    1a98:	31 09       	sbc	r19, r1
    1a9a:	41 09       	sbc	r20, r1
    1a9c:	51 09       	sbc	r21, r1
    1a9e:	56 95       	lsr	r21
    1aa0:	47 95       	ror	r20
    1aa2:	37 95       	ror	r19
    1aa4:	27 95       	ror	r18
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:121
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1aa6:	ec 85       	ldd	r30, Y+12	; 0x0c
    1aa8:	fd 85       	ldd	r31, Y+13	; 0x0d
    1aaa:	30 83       	st	Z, r19
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
    1aac:	ee 85       	ldd	r30, Y+14	; 0x0e
    1aae:	ff 85       	ldd	r31, Y+15	; 0x0f
    1ab0:	20 83       	st	Z, r18
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:124

  _written = false;
    1ab2:	18 8e       	std	Y+24, r1	; 0x18
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:132
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1ab4:	ec 89       	ldd	r30, Y+20	; 0x14
    1ab6:	fd 89       	ldd	r31, Y+21	; 0x15
    1ab8:	10 83       	st	Z, r17
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:134
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    1aba:	ea 89       	ldd	r30, Y+18	; 0x12
    1abc:	fb 89       	ldd	r31, Y+19	; 0x13
    1abe:	80 81       	ld	r24, Z
    1ac0:	88 69       	ori	r24, 0x98	; 152
    1ac2:	80 83       	st	Z, r24
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:135
  *_ucsrb &= ~_BV(UDRIE0);
    1ac4:	ea 89       	ldd	r30, Y+18	; 0x12
    1ac6:	fb 89       	ldd	r31, Y+19	; 0x13
    1ac8:	80 81       	ld	r24, Z
    1aca:	8f 7d       	andi	r24, 0xDF	; 223
    1acc:	80 83       	st	Z, r24
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial.cpp:136
}
    1ace:	df 91       	pop	r29
    1ad0:	cf 91       	pop	r28
    1ad2:	1f 91       	pop	r17
    1ad4:	ff 90       	pop	r15
    1ad6:	ef 90       	pop	r14
    1ad8:	df 90       	pop	r13
    1ada:	cf 90       	pop	r12
    1adc:	08 95       	ret

00001ade <__vector_18>:
__vector_18():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1ade:	1f 92       	push	r1
    1ae0:	0f 92       	push	r0
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	0f 92       	push	r0
    1ae6:	11 24       	eor	r1, r1
    1ae8:	2f 93       	push	r18
    1aea:	8f 93       	push	r24
    1aec:	9f 93       	push	r25
    1aee:	ef 93       	push	r30
    1af0:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1af2:	e0 91 ba 06 	lds	r30, 0x06BA	; 0x8006ba <Serial+0x10>
    1af6:	f0 91 bb 06 	lds	r31, 0x06BB	; 0x8006bb <Serial+0x11>
    1afa:	80 81       	ld	r24, Z
    1afc:	e0 91 c0 06 	lds	r30, 0x06C0	; 0x8006c0 <Serial+0x16>
    1b00:	f0 91 c1 06 	lds	r31, 0x06C1	; 0x8006c1 <Serial+0x17>
    1b04:	82 fd       	sbrc	r24, 2
    1b06:	1b c0       	rjmp	.+54     	; 0x1b3e <__vector_18+0x60>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1b08:	90 81       	ld	r25, Z
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1b0a:	80 91 c3 06 	lds	r24, 0x06C3	; 0x8006c3 <Serial+0x19>
    1b0e:	8f 5f       	subi	r24, 0xFF	; 255
    1b10:	8f 73       	andi	r24, 0x3F	; 63
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1b12:	20 91 c4 06 	lds	r18, 0x06C4	; 0x8006c4 <Serial+0x1a>
    1b16:	82 17       	cp	r24, r18
    1b18:	41 f0       	breq	.+16     	; 0x1b2a <__vector_18+0x4c>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    1b1a:	e0 91 c3 06 	lds	r30, 0x06C3	; 0x8006c3 <Serial+0x19>
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	e6 55       	subi	r30, 0x56	; 86
    1b22:	f9 4f       	sbci	r31, 0xF9	; 249
    1b24:	95 8f       	std	Z+29, r25	; 0x1d
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    1b26:	80 93 c3 06 	sts	0x06C3, r24	; 0x8006c3 <Serial+0x19>
__vector_18():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    1b2a:	ff 91       	pop	r31
    1b2c:	ef 91       	pop	r30
    1b2e:	9f 91       	pop	r25
    1b30:	8f 91       	pop	r24
    1b32:	2f 91       	pop	r18
    1b34:	0f 90       	pop	r0
    1b36:	0f be       	out	0x3f, r0	; 63
    1b38:	0f 90       	pop	r0
    1b3a:	1f 90       	pop	r1
    1b3c:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1b3e:	80 81       	ld	r24, Z
__vector_18():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    1b40:	f4 cf       	rjmp	.-24     	; 0x1b2a <__vector_18+0x4c>

00001b42 <__vector_19>:
__vector_19():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1b42:	1f 92       	push	r1
    1b44:	0f 92       	push	r0
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	0f 92       	push	r0
    1b4a:	11 24       	eor	r1, r1
    1b4c:	2f 93       	push	r18
    1b4e:	3f 93       	push	r19
    1b50:	4f 93       	push	r20
    1b52:	5f 93       	push	r21
    1b54:	6f 93       	push	r22
    1b56:	7f 93       	push	r23
    1b58:	8f 93       	push	r24
    1b5a:	9f 93       	push	r25
    1b5c:	af 93       	push	r26
    1b5e:	bf 93       	push	r27
    1b60:	ef 93       	push	r30
    1b62:	ff 93       	push	r31
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    1b64:	8a ea       	ldi	r24, 0xAA	; 170
    1b66:	96 e0       	ldi	r25, 0x06	; 6
    1b68:	0e 94 8f 0c 	call	0x191e	; 0x191e <HardwareSerial::_tx_udr_empty_irq()>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
    1b6c:	ff 91       	pop	r31
    1b6e:	ef 91       	pop	r30
    1b70:	bf 91       	pop	r27
    1b72:	af 91       	pop	r26
    1b74:	9f 91       	pop	r25
    1b76:	8f 91       	pop	r24
    1b78:	7f 91       	pop	r23
    1b7a:	6f 91       	pop	r22
    1b7c:	5f 91       	pop	r21
    1b7e:	4f 91       	pop	r20
    1b80:	3f 91       	pop	r19
    1b82:	2f 91       	pop	r18
    1b84:	0f 90       	pop	r0
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	0f 90       	pop	r0
    1b8a:	1f 90       	pop	r1
    1b8c:	18 95       	reti

00001b8e <Serial0_available()>:
_Z17Serial0_availablev():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1b8e:	8a ea       	ldi	r24, 0xAA	; 170
    1b90:	96 e0       	ldi	r25, 0x06	; 6
    1b92:	0e 94 44 0c 	call	0x1888	; 0x1888 <HardwareSerial::available()>
    1b96:	21 e0       	ldi	r18, 0x01	; 1
    1b98:	89 2b       	or	r24, r25
    1b9a:	09 f4       	brne	.+2      	; 0x1b9e <Serial0_available()+0x10>
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
    1b9e:	82 2f       	mov	r24, r18
    1ba0:	08 95       	ret

00001ba2 <_GLOBAL__sub_I___vector_18>:
_ZN5PrintC4Ev():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1ba2:	ea ea       	ldi	r30, 0xAA	; 170
    1ba4:	f6 e0       	ldi	r31, 0x06	; 6
    1ba6:	13 82       	std	Z+3, r1	; 0x03
    1ba8:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1baa:	88 ee       	ldi	r24, 0xE8	; 232
    1bac:	93 e0       	ldi	r25, 0x03	; 3
    1bae:	a0 e0       	ldi	r26, 0x00	; 0
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	84 83       	std	Z+4, r24	; 0x04
    1bb4:	95 83       	std	Z+5, r25	; 0x05
    1bb6:	a6 83       	std	Z+6, r26	; 0x06
    1bb8:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1bba:	8c e5       	ldi	r24, 0x5C	; 92
    1bbc:	96 e0       	ldi	r25, 0x06	; 6
    1bbe:	91 83       	std	Z+1, r25	; 0x01
    1bc0:	80 83       	st	Z, r24
    1bc2:	85 ec       	ldi	r24, 0xC5	; 197
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	95 87       	std	Z+13, r25	; 0x0d
    1bc8:	84 87       	std	Z+12, r24	; 0x0c
    1bca:	84 ec       	ldi	r24, 0xC4	; 196
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	97 87       	std	Z+15, r25	; 0x0f
    1bd0:	86 87       	std	Z+14, r24	; 0x0e
    1bd2:	80 ec       	ldi	r24, 0xC0	; 192
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	91 8b       	std	Z+17, r25	; 0x11
    1bd8:	80 8b       	std	Z+16, r24	; 0x10
    1bda:	81 ec       	ldi	r24, 0xC1	; 193
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	93 8b       	std	Z+19, r25	; 0x13
    1be0:	82 8b       	std	Z+18, r24	; 0x12
    1be2:	82 ec       	ldi	r24, 0xC2	; 194
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	95 8b       	std	Z+21, r25	; 0x15
    1be8:	84 8b       	std	Z+20, r24	; 0x14
    1bea:	86 ec       	ldi	r24, 0xC6	; 198
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	97 8b       	std	Z+23, r25	; 0x17
    1bf0:	86 8b       	std	Z+22, r24	; 0x16
    1bf2:	11 8e       	std	Z+25, r1	; 0x19
    1bf4:	12 8e       	std	Z+26, r1	; 0x1a
    1bf6:	13 8e       	std	Z+27, r1	; 0x1b
    1bf8:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_18():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
    1bfa:	08 95       	ret

00001bfc <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/Print.cpp:171
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1bfc:	af 92       	push	r10
    1bfe:	bf 92       	push	r11
    1c00:	cf 92       	push	r12
    1c02:	df 92       	push	r13
    1c04:	ef 92       	push	r14
    1c06:	ff 92       	push	r15
    1c08:	0f 93       	push	r16
    1c0a:	1f 93       	push	r17
    1c0c:	cf 93       	push	r28
    1c0e:	df 93       	push	r29
    1c10:	6c 01       	movw	r12, r24
    1c12:	7b 01       	movw	r14, r22
    1c14:	8b 01       	movw	r16, r22
    1c16:	04 0f       	add	r16, r20
    1c18:	15 1f       	adc	r17, r21
    1c1a:	eb 01       	movw	r28, r22
    1c1c:	5e 01       	movw	r10, r28
    1c1e:	ae 18       	sub	r10, r14
    1c20:	bf 08       	sbc	r11, r15
    1c22:	c0 17       	cp	r28, r16
    1c24:	d1 07       	cpc	r29, r17
    1c26:	59 f0       	breq	.+22     	; 0x1c3e <Print::write(unsigned char const*, unsigned int)+0x42>
    1c28:	69 91       	ld	r22, Y+
    1c2a:	d6 01       	movw	r26, r12
    1c2c:	ed 91       	ld	r30, X+
    1c2e:	fc 91       	ld	r31, X
    1c30:	01 90       	ld	r0, Z+
    1c32:	f0 81       	ld	r31, Z
    1c34:	e0 2d       	mov	r30, r0
    1c36:	c6 01       	movw	r24, r12
    1c38:	09 95       	icall
    1c3a:	89 2b       	or	r24, r25
    1c3c:	79 f7       	brne	.-34     	; 0x1c1c <Print::write(unsigned char const*, unsigned int)+0x20>
    1c3e:	c5 01       	movw	r24, r10
    1c40:	df 91       	pop	r29
    1c42:	cf 91       	pop	r28
    1c44:	1f 91       	pop	r17
    1c46:	0f 91       	pop	r16
    1c48:	ff 90       	pop	r15
    1c4a:	ef 90       	pop	r14
    1c4c:	df 90       	pop	r13
    1c4e:	cf 90       	pop	r12
    1c50:	bf 90       	pop	r11
    1c52:	af 90       	pop	r10
    1c54:	08 95       	ret

00001c56 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    1c56:	fb 01       	movw	r30, r22
    1c58:	01 90       	ld	r0, Z+
    1c5a:	00 20       	and	r0, r0
    1c5c:	e9 f7       	brne	.-6      	; 0x1c58 <Print::write(char const*) [clone .part.2]+0x2>
    1c5e:	31 97       	sbiw	r30, 0x01	; 1
    1c60:	af 01       	movw	r20, r30
    1c62:	46 1b       	sub	r20, r22
    1c64:	57 0b       	sbc	r21, r23
    1c66:	dc 01       	movw	r26, r24
    1c68:	ed 91       	ld	r30, X+
    1c6a:	fc 91       	ld	r31, X
    1c6c:	02 80       	ldd	r0, Z+2	; 0x02
    1c6e:	f3 81       	ldd	r31, Z+3	; 0x03
    1c70:	e0 2d       	mov	r30, r0
    1c72:	09 94       	ijmp

00001c74 <Print::print(char const*)>:
    1c74:	61 15       	cp	r22, r1
    1c76:	71 05       	cpc	r23, r1
    1c78:	11 f0       	breq	.+4      	; 0x1c7e <Print::print(char const*)+0xa>
    1c7a:	0c 94 2b 0e 	jmp	0x1c56	; 0x1c56 <Print::write(char const*) [clone .part.2]>
_ZN5Print5printEPKc():
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	08 95       	ret

00001c84 <Print::print(char)>:
_ZN5Print5printEc():
    1c84:	dc 01       	movw	r26, r24
    1c86:	ed 91       	ld	r30, X+
    1c88:	fc 91       	ld	r31, X
    1c8a:	01 90       	ld	r0, Z+
    1c8c:	f0 81       	ld	r31, Z
    1c8e:	e0 2d       	mov	r30, r0
    1c90:	09 94       	ijmp

00001c92 <Print::println()>:
_ZN5Print5writeEPKc():
    1c92:	6a e6       	ldi	r22, 0x6A	; 106
    1c94:	76 e0       	ldi	r23, 0x06	; 6
    1c96:	0c 94 2b 0e 	jmp	0x1c56	; 0x1c56 <Print::write(char const*) [clone .part.2]>

00001c9a <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
    1c9a:	0f 93       	push	r16
    1c9c:	1f 93       	push	r17
    1c9e:	cf 93       	push	r28
    1ca0:	df 93       	push	r29
    1ca2:	8c 01       	movw	r16, r24
_ZN5Print5writeEPKc():
    1ca4:	d0 e0       	ldi	r29, 0x00	; 0
    1ca6:	c0 e0       	ldi	r28, 0x00	; 0
    1ca8:	61 15       	cp	r22, r1
    1caa:	71 05       	cpc	r23, r1
    1cac:	19 f0       	breq	.+6      	; 0x1cb4 <Print::println(char const*)+0x1a>
    1cae:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <Print::write(char const*) [clone .part.2]>
    1cb2:	ec 01       	movw	r28, r24
_ZN5Print7printlnEPKc():
    1cb4:	c8 01       	movw	r24, r16
    1cb6:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <Print::println()>
    1cba:	8c 0f       	add	r24, r28
    1cbc:	9d 1f       	adc	r25, r29
    1cbe:	df 91       	pop	r29
    1cc0:	cf 91       	pop	r28
    1cc2:	1f 91       	pop	r17
    1cc4:	0f 91       	pop	r16
    1cc6:	08 95       	ret

00001cc8 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
    1cc8:	8f 92       	push	r8
    1cca:	9f 92       	push	r9
    1ccc:	af 92       	push	r10
    1cce:	bf 92       	push	r11
    1cd0:	ef 92       	push	r14
    1cd2:	ff 92       	push	r15
    1cd4:	0f 93       	push	r16
    1cd6:	1f 93       	push	r17
    1cd8:	cf 93       	push	r28
    1cda:	df 93       	push	r29
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
    1ce0:	a1 97       	sbiw	r28, 0x21	; 33
    1ce2:	0f b6       	in	r0, 0x3f	; 63
    1ce4:	f8 94       	cli
    1ce6:	de bf       	out	0x3e, r29	; 62
    1ce8:	0f be       	out	0x3f, r0	; 63
    1cea:	cd bf       	out	0x3d, r28	; 61
    1cec:	7c 01       	movw	r14, r24
    1cee:	fa 01       	movw	r30, r20
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	19 a2       	std	Y+33, r1	; 0x21
    1cf4:	22 30       	cpi	r18, 0x02	; 2
    1cf6:	08 f4       	brcc	.+2      	; 0x1cfa <Print::printNumber(unsigned long, unsigned char)+0x32>
    1cf8:	2a e0       	ldi	r18, 0x0A	; 10
    1cfa:	8e 01       	movw	r16, r28
    1cfc:	0f 5d       	subi	r16, 0xDF	; 223
    1cfe:	1f 4f       	sbci	r17, 0xFF	; 255
    1d00:	82 2e       	mov	r8, r18
    1d02:	91 2c       	mov	r9, r1
    1d04:	b1 2c       	mov	r11, r1
    1d06:	a1 2c       	mov	r10, r1
    1d08:	bf 01       	movw	r22, r30
    1d0a:	a5 01       	movw	r20, r10
    1d0c:	94 01       	movw	r18, r8
    1d0e:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__udivmodsi4>
    1d12:	f9 01       	movw	r30, r18
    1d14:	ca 01       	movw	r24, r20
    1d16:	6a 30       	cpi	r22, 0x0A	; 10
    1d18:	0c f5       	brge	.+66     	; 0x1d5c <Print::printNumber(unsigned long, unsigned char)+0x94>
    1d1a:	60 5d       	subi	r22, 0xD0	; 208
    1d1c:	d8 01       	movw	r26, r16
    1d1e:	6e 93       	st	-X, r22
    1d20:	8d 01       	movw	r16, r26
    1d22:	23 2b       	or	r18, r19
    1d24:	24 2b       	or	r18, r20
    1d26:	25 2b       	or	r18, r21
    1d28:	79 f7       	brne	.-34     	; 0x1d08 <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	10 97       	sbiw	r26, 0x00	; 0
    1d30:	21 f0       	breq	.+8      	; 0x1d3a <Print::printNumber(unsigned long, unsigned char)+0x72>
    1d32:	bd 01       	movw	r22, r26
    1d34:	c7 01       	movw	r24, r14
    1d36:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
    1d3a:	a1 96       	adiw	r28, 0x21	; 33
    1d3c:	0f b6       	in	r0, 0x3f	; 63
    1d3e:	f8 94       	cli
    1d40:	de bf       	out	0x3e, r29	; 62
    1d42:	0f be       	out	0x3f, r0	; 63
    1d44:	cd bf       	out	0x3d, r28	; 61
    1d46:	df 91       	pop	r29
    1d48:	cf 91       	pop	r28
    1d4a:	1f 91       	pop	r17
    1d4c:	0f 91       	pop	r16
    1d4e:	ff 90       	pop	r15
    1d50:	ef 90       	pop	r14
    1d52:	bf 90       	pop	r11
    1d54:	af 90       	pop	r10
    1d56:	9f 90       	pop	r9
    1d58:	8f 90       	pop	r8
    1d5a:	08 95       	ret
    1d5c:	69 5c       	subi	r22, 0xC9	; 201
    1d5e:	de cf       	rjmp	.-68     	; 0x1d1c <Print::printNumber(unsigned long, unsigned char)+0x54>

00001d60 <Print::print(long, int)>:
_ZN5Print5printEli():
    1d60:	cf 92       	push	r12
    1d62:	df 92       	push	r13
    1d64:	ef 92       	push	r14
    1d66:	ff 92       	push	r15
    1d68:	0f 93       	push	r16
    1d6a:	1f 93       	push	r17
    1d6c:	cf 93       	push	r28
    1d6e:	df 93       	push	r29
    1d70:	21 15       	cp	r18, r1
    1d72:	31 05       	cpc	r19, r1
    1d74:	81 f4       	brne	.+32     	; 0x1d96 <Print::print(long, int)+0x36>
    1d76:	dc 01       	movw	r26, r24
    1d78:	ed 91       	ld	r30, X+
    1d7a:	fc 91       	ld	r31, X
    1d7c:	01 90       	ld	r0, Z+
    1d7e:	f0 81       	ld	r31, Z
    1d80:	e0 2d       	mov	r30, r0
    1d82:	64 2f       	mov	r22, r20
    1d84:	df 91       	pop	r29
    1d86:	cf 91       	pop	r28
    1d88:	1f 91       	pop	r17
    1d8a:	0f 91       	pop	r16
    1d8c:	ff 90       	pop	r15
    1d8e:	ef 90       	pop	r14
    1d90:	df 90       	pop	r13
    1d92:	cf 90       	pop	r12
    1d94:	09 94       	ijmp
    1d96:	2a 30       	cpi	r18, 0x0A	; 10
    1d98:	31 05       	cpc	r19, r1
    1d9a:	01 f5       	brne	.+64     	; 0x1ddc <Print::print(long, int)+0x7c>
    1d9c:	2a e0       	ldi	r18, 0x0A	; 10
    1d9e:	77 ff       	sbrs	r23, 7
    1da0:	1d c0       	rjmp	.+58     	; 0x1ddc <Print::print(long, int)+0x7c>
    1da2:	6a 01       	movw	r12, r20
    1da4:	7b 01       	movw	r14, r22
    1da6:	ec 01       	movw	r28, r24
    1da8:	6d e2       	ldi	r22, 0x2D	; 45
    1daa:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <Print::print(char)>
    1dae:	8c 01       	movw	r16, r24
    1db0:	44 27       	eor	r20, r20
    1db2:	55 27       	eor	r21, r21
    1db4:	ba 01       	movw	r22, r20
    1db6:	4c 19       	sub	r20, r12
    1db8:	5d 09       	sbc	r21, r13
    1dba:	6e 09       	sbc	r22, r14
    1dbc:	7f 09       	sbc	r23, r15
    1dbe:	2a e0       	ldi	r18, 0x0A	; 10
    1dc0:	ce 01       	movw	r24, r28
    1dc2:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <Print::printNumber(unsigned long, unsigned char)>
    1dc6:	80 0f       	add	r24, r16
    1dc8:	91 1f       	adc	r25, r17
    1dca:	df 91       	pop	r29
    1dcc:	cf 91       	pop	r28
    1dce:	1f 91       	pop	r17
    1dd0:	0f 91       	pop	r16
    1dd2:	ff 90       	pop	r15
    1dd4:	ef 90       	pop	r14
    1dd6:	df 90       	pop	r13
    1dd8:	cf 90       	pop	r12
    1dda:	08 95       	ret
    1ddc:	df 91       	pop	r29
    1dde:	cf 91       	pop	r28
    1de0:	1f 91       	pop	r17
    1de2:	0f 91       	pop	r16
    1de4:	ff 90       	pop	r15
    1de6:	ef 90       	pop	r14
    1de8:	df 90       	pop	r13
    1dea:	cf 90       	pop	r12
    1dec:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <Print::printNumber(unsigned long, unsigned char)>

00001df0 <Print::print(int, int)>:
_ZN5Print5printEii():
    1df0:	9a 01       	movw	r18, r20
    1df2:	ab 01       	movw	r20, r22
    1df4:	77 0f       	add	r23, r23
    1df6:	66 0b       	sbc	r22, r22
    1df8:	77 0b       	sbc	r23, r23
    1dfa:	0c 94 b0 0e 	jmp	0x1d60	; 0x1d60 <Print::print(long, int)>

00001dfe <Print::println(int, int)>:
_ZN5Print7printlnEii():
    1dfe:	0f 93       	push	r16
    1e00:	1f 93       	push	r17
    1e02:	cf 93       	push	r28
    1e04:	df 93       	push	r29
    1e06:	ec 01       	movw	r28, r24
    1e08:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <Print::print(int, int)>
    1e0c:	8c 01       	movw	r16, r24
    1e0e:	ce 01       	movw	r24, r28
    1e10:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <Print::println()>
    1e14:	80 0f       	add	r24, r16
    1e16:	91 1f       	adc	r25, r17
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	1f 91       	pop	r17
    1e1e:	0f 91       	pop	r16
    1e20:	08 95       	ret

00001e22 <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
    1e22:	21 15       	cp	r18, r1
    1e24:	31 05       	cpc	r19, r1
    1e26:	41 f4       	brne	.+16     	; 0x1e38 <Print::print(unsigned long, int)+0x16>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	ed 91       	ld	r30, X+
    1e2c:	fc 91       	ld	r31, X
    1e2e:	01 90       	ld	r0, Z+
    1e30:	f0 81       	ld	r31, Z
    1e32:	e0 2d       	mov	r30, r0
    1e34:	64 2f       	mov	r22, r20
    1e36:	09 94       	ijmp
    1e38:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <Print::printNumber(unsigned long, unsigned char)>

00001e3c <Print::println(unsigned long, int)>:
_ZN5Print7printlnEmi():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/Print.cpp:181
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    1e3c:	0f 93       	push	r16
    1e3e:	1f 93       	push	r17
    1e40:	cf 93       	push	r28
    1e42:	df 93       	push	r29
    1e44:	ec 01       	movw	r28, r24
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/Print.cpp:182
  size_t n = print(num, base);
    1e46:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <Print::print(unsigned long, int)>
    1e4a:	8c 01       	movw	r16, r24
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/Print.cpp:183
  n += println();
    1e4c:	ce 01       	movw	r24, r28
    1e4e:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <Print::println()>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/Print.cpp:185
  return n;
}
    1e52:	80 0f       	add	r24, r16
    1e54:	91 1f       	adc	r25, r17
    1e56:	df 91       	pop	r29
    1e58:	cf 91       	pop	r28
    1e5a:	1f 91       	pop	r17
    1e5c:	0f 91       	pop	r16
    1e5e:	08 95       	ret

00001e60 <initVariant>:
initVariant():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1e60:	08 95       	ret

00001e62 <main>:
main():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    1e62:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <init>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/main.cpp:37

  initVariant();
    1e66:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <initVariant>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    1e6a:	0e 94 a7 00 	call	0x14e	; 0x14e <setup>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    1e6e:	c1 e8       	ldi	r28, 0x81	; 129
    1e70:	dc e0       	ldi	r29, 0x0C	; 12
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    1e72:	0e 94 92 08 	call	0x1124	; 0x1124 <loop>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    1e76:	20 97       	sbiw	r28, 0x00	; 0
    1e78:	e1 f3       	breq	.-8      	; 0x1e72 <main+0x10>
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/main.cpp:47 (discriminator 1)
    1e7a:	0e 94 81 0c 	call	0x1902	; 0x1902 <serialEventRun()>
    1e7e:	f9 cf       	rjmp	.-14     	; 0x1e72 <main+0x10>

00001e80 <yield>:
__empty():
/Users/Tom/Library/Arduino15/packages/MiniCore/hardware/avr/2.1.3/cores/MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    1e80:	08 95       	ret

00001e82 <__divsf3>:
__divsf3():
    1e82:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__divsf3x>
    1e86:	0c 94 36 10 	jmp	0x206c	; 0x206c <__fp_round>
    1e8a:	0e 94 2f 10 	call	0x205e	; 0x205e <__fp_pscB>
    1e8e:	58 f0       	brcs	.+22     	; 0x1ea6 <__divsf3+0x24>
    1e90:	0e 94 28 10 	call	0x2050	; 0x2050 <__fp_pscA>
    1e94:	40 f0       	brcs	.+16     	; 0x1ea6 <__divsf3+0x24>
    1e96:	29 f4       	brne	.+10     	; 0x1ea2 <__divsf3+0x20>
    1e98:	5f 3f       	cpi	r21, 0xFF	; 255
    1e9a:	29 f0       	breq	.+10     	; 0x1ea6 <__divsf3+0x24>
    1e9c:	0c 94 1f 10 	jmp	0x203e	; 0x203e <__fp_inf>
    1ea0:	51 11       	cpse	r21, r1
    1ea2:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <__fp_szero>
    1ea6:	0c 94 25 10 	jmp	0x204a	; 0x204a <__fp_nan>

00001eaa <__divsf3x>:
__divsf3x():
    1eaa:	0e 94 47 10 	call	0x208e	; 0x208e <__fp_split3>
    1eae:	68 f3       	brcs	.-38     	; 0x1e8a <__divsf3+0x8>

00001eb0 <__divsf3_pse>:
    1eb0:	99 23       	and	r25, r25
    1eb2:	b1 f3       	breq	.-20     	; 0x1ea0 <__divsf3+0x1e>
    1eb4:	55 23       	and	r21, r21
    1eb6:	91 f3       	breq	.-28     	; 0x1e9c <__divsf3+0x1a>
    1eb8:	95 1b       	sub	r25, r21
    1eba:	55 0b       	sbc	r21, r21
    1ebc:	bb 27       	eor	r27, r27
    1ebe:	aa 27       	eor	r26, r26
    1ec0:	62 17       	cp	r22, r18
    1ec2:	73 07       	cpc	r23, r19
    1ec4:	84 07       	cpc	r24, r20
    1ec6:	38 f0       	brcs	.+14     	; 0x1ed6 <__divsf3_pse+0x26>
    1ec8:	9f 5f       	subi	r25, 0xFF	; 255
    1eca:	5f 4f       	sbci	r21, 0xFF	; 255
    1ecc:	22 0f       	add	r18, r18
    1ece:	33 1f       	adc	r19, r19
    1ed0:	44 1f       	adc	r20, r20
    1ed2:	aa 1f       	adc	r26, r26
    1ed4:	a9 f3       	breq	.-22     	; 0x1ec0 <__divsf3_pse+0x10>
    1ed6:	35 d0       	rcall	.+106    	; 0x1f42 <__divsf3_pse+0x92>
    1ed8:	0e 2e       	mov	r0, r30
    1eda:	3a f0       	brmi	.+14     	; 0x1eea <__divsf3_pse+0x3a>
    1edc:	e0 e8       	ldi	r30, 0x80	; 128
    1ede:	32 d0       	rcall	.+100    	; 0x1f44 <__divsf3_pse+0x94>
    1ee0:	91 50       	subi	r25, 0x01	; 1
    1ee2:	50 40       	sbci	r21, 0x00	; 0
    1ee4:	e6 95       	lsr	r30
    1ee6:	00 1c       	adc	r0, r0
    1ee8:	ca f7       	brpl	.-14     	; 0x1edc <__divsf3_pse+0x2c>
    1eea:	2b d0       	rcall	.+86     	; 0x1f42 <__divsf3_pse+0x92>
    1eec:	fe 2f       	mov	r31, r30
    1eee:	29 d0       	rcall	.+82     	; 0x1f42 <__divsf3_pse+0x92>
    1ef0:	66 0f       	add	r22, r22
    1ef2:	77 1f       	adc	r23, r23
    1ef4:	88 1f       	adc	r24, r24
    1ef6:	bb 1f       	adc	r27, r27
    1ef8:	26 17       	cp	r18, r22
    1efa:	37 07       	cpc	r19, r23
    1efc:	48 07       	cpc	r20, r24
    1efe:	ab 07       	cpc	r26, r27
    1f00:	b0 e8       	ldi	r27, 0x80	; 128
    1f02:	09 f0       	breq	.+2      	; 0x1f06 <__divsf3_pse+0x56>
    1f04:	bb 0b       	sbc	r27, r27
    1f06:	80 2d       	mov	r24, r0
    1f08:	bf 01       	movw	r22, r30
    1f0a:	ff 27       	eor	r31, r31
    1f0c:	93 58       	subi	r25, 0x83	; 131
    1f0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f10:	3a f0       	brmi	.+14     	; 0x1f20 <__divsf3_pse+0x70>
    1f12:	9e 3f       	cpi	r25, 0xFE	; 254
    1f14:	51 05       	cpc	r21, r1
    1f16:	78 f0       	brcs	.+30     	; 0x1f36 <__divsf3_pse+0x86>
    1f18:	0c 94 1f 10 	jmp	0x203e	; 0x203e <__fp_inf>
    1f1c:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <__fp_szero>
    1f20:	5f 3f       	cpi	r21, 0xFF	; 255
    1f22:	e4 f3       	brlt	.-8      	; 0x1f1c <__divsf3_pse+0x6c>
    1f24:	98 3e       	cpi	r25, 0xE8	; 232
    1f26:	d4 f3       	brlt	.-12     	; 0x1f1c <__divsf3_pse+0x6c>
    1f28:	86 95       	lsr	r24
    1f2a:	77 95       	ror	r23
    1f2c:	67 95       	ror	r22
    1f2e:	b7 95       	ror	r27
    1f30:	f7 95       	ror	r31
    1f32:	9f 5f       	subi	r25, 0xFF	; 255
    1f34:	c9 f7       	brne	.-14     	; 0x1f28 <__divsf3_pse+0x78>
    1f36:	88 0f       	add	r24, r24
    1f38:	91 1d       	adc	r25, r1
    1f3a:	96 95       	lsr	r25
    1f3c:	87 95       	ror	r24
    1f3e:	97 f9       	bld	r25, 7
    1f40:	08 95       	ret
    1f42:	e1 e0       	ldi	r30, 0x01	; 1
    1f44:	66 0f       	add	r22, r22
    1f46:	77 1f       	adc	r23, r23
    1f48:	88 1f       	adc	r24, r24
    1f4a:	bb 1f       	adc	r27, r27
    1f4c:	62 17       	cp	r22, r18
    1f4e:	73 07       	cpc	r23, r19
    1f50:	84 07       	cpc	r24, r20
    1f52:	ba 07       	cpc	r27, r26
    1f54:	20 f0       	brcs	.+8      	; 0x1f5e <__divsf3_pse+0xae>
    1f56:	62 1b       	sub	r22, r18
    1f58:	73 0b       	sbc	r23, r19
    1f5a:	84 0b       	sbc	r24, r20
    1f5c:	ba 0b       	sbc	r27, r26
    1f5e:	ee 1f       	adc	r30, r30
    1f60:	88 f7       	brcc	.-30     	; 0x1f44 <__divsf3_pse+0x94>
    1f62:	e0 95       	com	r30
    1f64:	08 95       	ret

00001f66 <__fixunssfsi>:
    1f66:	0e 94 4f 10 	call	0x209e	; 0x209e <__fp_splitA>
    1f6a:	88 f0       	brcs	.+34     	; 0x1f8e <__fixunssfsi+0x28>
    1f6c:	9f 57       	subi	r25, 0x7F	; 127
    1f6e:	98 f0       	brcs	.+38     	; 0x1f96 <__fixunssfsi+0x30>
    1f70:	b9 2f       	mov	r27, r25
    1f72:	99 27       	eor	r25, r25
    1f74:	b7 51       	subi	r27, 0x17	; 23
    1f76:	b0 f0       	brcs	.+44     	; 0x1fa4 <__fixunssfsi+0x3e>
    1f78:	e1 f0       	breq	.+56     	; 0x1fb2 <__fixunssfsi+0x4c>
    1f7a:	66 0f       	add	r22, r22
    1f7c:	77 1f       	adc	r23, r23
    1f7e:	88 1f       	adc	r24, r24
    1f80:	99 1f       	adc	r25, r25
    1f82:	1a f0       	brmi	.+6      	; 0x1f8a <__fixunssfsi+0x24>
    1f84:	ba 95       	dec	r27
__fixunssfsi():
    1f86:	c9 f7       	brne	.-14     	; 0x1f7a <__fixunssfsi+0x14>
    1f88:	14 c0       	rjmp	.+40     	; 0x1fb2 <__fixunssfsi+0x4c>
    1f8a:	b1 30       	cpi	r27, 0x01	; 1
    1f8c:	91 f0       	breq	.+36     	; 0x1fb2 <__fixunssfsi+0x4c>
    1f8e:	0e 94 69 10 	call	0x20d2	; 0x20d2 <__fp_zero>
    1f92:	b1 e0       	ldi	r27, 0x01	; 1
    1f94:	08 95       	ret
    1f96:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <__fp_zero>
    1f9a:	67 2f       	mov	r22, r23
    1f9c:	78 2f       	mov	r23, r24
    1f9e:	88 27       	eor	r24, r24
    1fa0:	b8 5f       	subi	r27, 0xF8	; 248
    1fa2:	39 f0       	breq	.+14     	; 0x1fb2 <__fixunssfsi+0x4c>
    1fa4:	b9 3f       	cpi	r27, 0xF9	; 249
    1fa6:	cc f3       	brlt	.-14     	; 0x1f9a <__fixunssfsi+0x34>
    1fa8:	86 95       	lsr	r24
    1faa:	77 95       	ror	r23
    1fac:	67 95       	ror	r22
    1fae:	b3 95       	inc	r27
    1fb0:	d9 f7       	brne	.-10     	; 0x1fa8 <__fixunssfsi+0x42>
    1fb2:	3e f4       	brtc	.+14     	; 0x1fc2 <__fixunssfsi+0x5c>
    1fb4:	90 95       	com	r25
    1fb6:	80 95       	com	r24
    1fb8:	70 95       	com	r23
    1fba:	61 95       	neg	r22
    1fbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1fbe:	8f 4f       	sbci	r24, 0xFF	; 255
    1fc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc2:	08 95       	ret

00001fc4 <__floatunsisf>:
__floatunsisf():
    1fc4:	e8 94       	clt
    1fc6:	09 c0       	rjmp	.+18     	; 0x1fda <__floatsisf+0x12>

00001fc8 <__floatsisf>:
    1fc8:	97 fb       	bst	r25, 7
    1fca:	3e f4       	brtc	.+14     	; 0x1fda <__floatsisf+0x12>
    1fcc:	90 95       	com	r25
    1fce:	80 95       	com	r24
    1fd0:	70 95       	com	r23
    1fd2:	61 95       	neg	r22
    1fd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd6:	8f 4f       	sbci	r24, 0xFF	; 255
    1fd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1fda:	99 23       	and	r25, r25
    1fdc:	a9 f0       	breq	.+42     	; 0x2008 <__floatsisf+0x40>
    1fde:	f9 2f       	mov	r31, r25
    1fe0:	96 e9       	ldi	r25, 0x96	; 150
    1fe2:	bb 27       	eor	r27, r27
    1fe4:	93 95       	inc	r25
    1fe6:	f6 95       	lsr	r31
    1fe8:	87 95       	ror	r24
    1fea:	77 95       	ror	r23
    1fec:	67 95       	ror	r22
    1fee:	b7 95       	ror	r27
    1ff0:	f1 11       	cpse	r31, r1
    1ff2:	f8 cf       	rjmp	.-16     	; 0x1fe4 <__floatsisf+0x1c>
    1ff4:	fa f4       	brpl	.+62     	; 0x2034 <__floatsisf+0x6c>
    1ff6:	bb 0f       	add	r27, r27
    1ff8:	11 f4       	brne	.+4      	; 0x1ffe <__floatsisf+0x36>
    1ffa:	60 ff       	sbrs	r22, 0
    1ffc:	1b c0       	rjmp	.+54     	; 0x2034 <__floatsisf+0x6c>
    1ffe:	6f 5f       	subi	r22, 0xFF	; 255
    2000:	7f 4f       	sbci	r23, 0xFF	; 255
    2002:	8f 4f       	sbci	r24, 0xFF	; 255
    2004:	9f 4f       	sbci	r25, 0xFF	; 255
    2006:	16 c0       	rjmp	.+44     	; 0x2034 <__floatsisf+0x6c>
    2008:	88 23       	and	r24, r24
    200a:	11 f0       	breq	.+4      	; 0x2010 <__floatsisf+0x48>
    200c:	96 e9       	ldi	r25, 0x96	; 150
    200e:	11 c0       	rjmp	.+34     	; 0x2032 <__floatsisf+0x6a>
    2010:	77 23       	and	r23, r23
    2012:	21 f0       	breq	.+8      	; 0x201c <__floatsisf+0x54>
    2014:	9e e8       	ldi	r25, 0x8E	; 142
    2016:	87 2f       	mov	r24, r23
    2018:	76 2f       	mov	r23, r22
    201a:	05 c0       	rjmp	.+10     	; 0x2026 <__floatsisf+0x5e>
    201c:	66 23       	and	r22, r22
    201e:	71 f0       	breq	.+28     	; 0x203c <__floatsisf+0x74>
    2020:	96 e8       	ldi	r25, 0x86	; 134
    2022:	86 2f       	mov	r24, r22
    2024:	70 e0       	ldi	r23, 0x00	; 0
    2026:	60 e0       	ldi	r22, 0x00	; 0
    2028:	2a f0       	brmi	.+10     	; 0x2034 <__floatsisf+0x6c>
    202a:	9a 95       	dec	r25
    202c:	66 0f       	add	r22, r22
    202e:	77 1f       	adc	r23, r23
    2030:	88 1f       	adc	r24, r24
    2032:	da f7       	brpl	.-10     	; 0x202a <__floatsisf+0x62>
    2034:	88 0f       	add	r24, r24
    2036:	96 95       	lsr	r25
    2038:	87 95       	ror	r24
    203a:	97 f9       	bld	r25, 7
    203c:	08 95       	ret

0000203e <__fp_inf>:
__fp_inf():
    203e:	97 f9       	bld	r25, 7
    2040:	9f 67       	ori	r25, 0x7F	; 127
    2042:	80 e8       	ldi	r24, 0x80	; 128
    2044:	70 e0       	ldi	r23, 0x00	; 0
    2046:	60 e0       	ldi	r22, 0x00	; 0
    2048:	08 95       	ret

0000204a <__fp_nan>:
__fp_nan():
    204a:	9f ef       	ldi	r25, 0xFF	; 255
    204c:	80 ec       	ldi	r24, 0xC0	; 192
    204e:	08 95       	ret

00002050 <__fp_pscA>:
__fp_pscA():
    2050:	00 24       	eor	r0, r0
    2052:	0a 94       	dec	r0
    2054:	16 16       	cp	r1, r22
    2056:	17 06       	cpc	r1, r23
    2058:	18 06       	cpc	r1, r24
    205a:	09 06       	cpc	r0, r25
    205c:	08 95       	ret

0000205e <__fp_pscB>:
__fp_pscB():
    205e:	00 24       	eor	r0, r0
    2060:	0a 94       	dec	r0
    2062:	12 16       	cp	r1, r18
    2064:	13 06       	cpc	r1, r19
    2066:	14 06       	cpc	r1, r20
    2068:	05 06       	cpc	r0, r21
    206a:	08 95       	ret

0000206c <__fp_round>:
__fp_round():
    206c:	09 2e       	mov	r0, r25
    206e:	03 94       	inc	r0
    2070:	00 0c       	add	r0, r0
    2072:	11 f4       	brne	.+4      	; 0x2078 <__fp_round+0xc>
    2074:	88 23       	and	r24, r24
    2076:	52 f0       	brmi	.+20     	; 0x208c <__fp_round+0x20>
    2078:	bb 0f       	add	r27, r27
    207a:	40 f4       	brcc	.+16     	; 0x208c <__fp_round+0x20>
    207c:	bf 2b       	or	r27, r31
    207e:	11 f4       	brne	.+4      	; 0x2084 <__fp_round+0x18>
    2080:	60 ff       	sbrs	r22, 0
    2082:	04 c0       	rjmp	.+8      	; 0x208c <__fp_round+0x20>
    2084:	6f 5f       	subi	r22, 0xFF	; 255
    2086:	7f 4f       	sbci	r23, 0xFF	; 255
    2088:	8f 4f       	sbci	r24, 0xFF	; 255
    208a:	9f 4f       	sbci	r25, 0xFF	; 255
    208c:	08 95       	ret

0000208e <__fp_split3>:
__fp_split3():
    208e:	57 fd       	sbrc	r21, 7
    2090:	90 58       	subi	r25, 0x80	; 128
    2092:	44 0f       	add	r20, r20
    2094:	55 1f       	adc	r21, r21
    2096:	59 f0       	breq	.+22     	; 0x20ae <__fp_splitA+0x10>
    2098:	5f 3f       	cpi	r21, 0xFF	; 255
    209a:	71 f0       	breq	.+28     	; 0x20b8 <__fp_splitA+0x1a>
    209c:	47 95       	ror	r20

0000209e <__fp_splitA>:
    209e:	88 0f       	add	r24, r24
    20a0:	97 fb       	bst	r25, 7
    20a2:	99 1f       	adc	r25, r25
    20a4:	61 f0       	breq	.+24     	; 0x20be <__fp_splitA+0x20>
    20a6:	9f 3f       	cpi	r25, 0xFF	; 255
    20a8:	79 f0       	breq	.+30     	; 0x20c8 <__fp_splitA+0x2a>
    20aa:	87 95       	ror	r24
    20ac:	08 95       	ret
    20ae:	12 16       	cp	r1, r18
    20b0:	13 06       	cpc	r1, r19
    20b2:	14 06       	cpc	r1, r20
    20b4:	55 1f       	adc	r21, r21
    20b6:	f2 cf       	rjmp	.-28     	; 0x209c <__fp_split3+0xe>
    20b8:	46 95       	lsr	r20
    20ba:	f1 df       	rcall	.-30     	; 0x209e <__fp_splitA>
    20bc:	08 c0       	rjmp	.+16     	; 0x20ce <__fp_splitA+0x30>
    20be:	16 16       	cp	r1, r22
    20c0:	17 06       	cpc	r1, r23
    20c2:	18 06       	cpc	r1, r24
    20c4:	99 1f       	adc	r25, r25
    20c6:	f1 cf       	rjmp	.-30     	; 0x20aa <__fp_splitA+0xc>
    20c8:	86 95       	lsr	r24
    20ca:	71 05       	cpc	r23, r1
    20cc:	61 05       	cpc	r22, r1
    20ce:	08 94       	sec
    20d0:	08 95       	ret

000020d2 <__fp_zero>:
__fp_zero():
    20d2:	e8 94       	clt

000020d4 <__fp_szero>:
    20d4:	bb 27       	eor	r27, r27
    20d6:	66 27       	eor	r22, r22
    20d8:	77 27       	eor	r23, r23
    20da:	cb 01       	movw	r24, r22
    20dc:	97 f9       	bld	r25, 7
    20de:	08 95       	ret

000020e0 <__mulsf3>:
__mulsf3():
    20e0:	0e 94 83 10 	call	0x2106	; 0x2106 <__mulsf3x>
    20e4:	0c 94 36 10 	jmp	0x206c	; 0x206c <__fp_round>
    20e8:	0e 94 28 10 	call	0x2050	; 0x2050 <__fp_pscA>
    20ec:	38 f0       	brcs	.+14     	; 0x20fc <__mulsf3+0x1c>
    20ee:	0e 94 2f 10 	call	0x205e	; 0x205e <__fp_pscB>
    20f2:	20 f0       	brcs	.+8      	; 0x20fc <__mulsf3+0x1c>
    20f4:	95 23       	and	r25, r21
    20f6:	11 f0       	breq	.+4      	; 0x20fc <__mulsf3+0x1c>
    20f8:	0c 94 1f 10 	jmp	0x203e	; 0x203e <__fp_inf>
    20fc:	0c 94 25 10 	jmp	0x204a	; 0x204a <__fp_nan>
    2100:	11 24       	eor	r1, r1
    2102:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <__fp_szero>

00002106 <__mulsf3x>:
__mulsf3x():
    2106:	0e 94 47 10 	call	0x208e	; 0x208e <__fp_split3>
    210a:	70 f3       	brcs	.-36     	; 0x20e8 <__mulsf3+0x8>

0000210c <__mulsf3_pse>:
    210c:	95 9f       	mul	r25, r21
    210e:	c1 f3       	breq	.-16     	; 0x2100 <__mulsf3+0x20>
    2110:	95 0f       	add	r25, r21
    2112:	50 e0       	ldi	r21, 0x00	; 0
    2114:	55 1f       	adc	r21, r21
    2116:	62 9f       	mul	r22, r18
    2118:	f0 01       	movw	r30, r0
    211a:	72 9f       	mul	r23, r18
    211c:	bb 27       	eor	r27, r27
    211e:	f0 0d       	add	r31, r0
    2120:	b1 1d       	adc	r27, r1
    2122:	63 9f       	mul	r22, r19
    2124:	aa 27       	eor	r26, r26
    2126:	f0 0d       	add	r31, r0
    2128:	b1 1d       	adc	r27, r1
    212a:	aa 1f       	adc	r26, r26
    212c:	64 9f       	mul	r22, r20
    212e:	66 27       	eor	r22, r22
    2130:	b0 0d       	add	r27, r0
    2132:	a1 1d       	adc	r26, r1
    2134:	66 1f       	adc	r22, r22
    2136:	82 9f       	mul	r24, r18
    2138:	22 27       	eor	r18, r18
    213a:	b0 0d       	add	r27, r0
    213c:	a1 1d       	adc	r26, r1
    213e:	62 1f       	adc	r22, r18
    2140:	73 9f       	mul	r23, r19
    2142:	b0 0d       	add	r27, r0
    2144:	a1 1d       	adc	r26, r1
    2146:	62 1f       	adc	r22, r18
    2148:	83 9f       	mul	r24, r19
    214a:	a0 0d       	add	r26, r0
    214c:	61 1d       	adc	r22, r1
    214e:	22 1f       	adc	r18, r18
    2150:	74 9f       	mul	r23, r20
    2152:	33 27       	eor	r19, r19
    2154:	a0 0d       	add	r26, r0
    2156:	61 1d       	adc	r22, r1
    2158:	23 1f       	adc	r18, r19
    215a:	84 9f       	mul	r24, r20
    215c:	60 0d       	add	r22, r0
    215e:	21 1d       	adc	r18, r1
    2160:	82 2f       	mov	r24, r18
    2162:	76 2f       	mov	r23, r22
    2164:	6a 2f       	mov	r22, r26
    2166:	11 24       	eor	r1, r1
    2168:	9f 57       	subi	r25, 0x7F	; 127
    216a:	50 40       	sbci	r21, 0x00	; 0
    216c:	9a f0       	brmi	.+38     	; 0x2194 <__mulsf3_pse+0x88>
    216e:	f1 f0       	breq	.+60     	; 0x21ac <__mulsf3_pse+0xa0>
    2170:	88 23       	and	r24, r24
    2172:	4a f0       	brmi	.+18     	; 0x2186 <__mulsf3_pse+0x7a>
    2174:	ee 0f       	add	r30, r30
    2176:	ff 1f       	adc	r31, r31
    2178:	bb 1f       	adc	r27, r27
    217a:	66 1f       	adc	r22, r22
    217c:	77 1f       	adc	r23, r23
    217e:	88 1f       	adc	r24, r24
    2180:	91 50       	subi	r25, 0x01	; 1
    2182:	50 40       	sbci	r21, 0x00	; 0
    2184:	a9 f7       	brne	.-22     	; 0x2170 <__mulsf3_pse+0x64>
    2186:	9e 3f       	cpi	r25, 0xFE	; 254
    2188:	51 05       	cpc	r21, r1
    218a:	80 f0       	brcs	.+32     	; 0x21ac <__mulsf3_pse+0xa0>
    218c:	0c 94 1f 10 	jmp	0x203e	; 0x203e <__fp_inf>
    2190:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <__fp_szero>
    2194:	5f 3f       	cpi	r21, 0xFF	; 255
    2196:	e4 f3       	brlt	.-8      	; 0x2190 <__mulsf3_pse+0x84>
    2198:	98 3e       	cpi	r25, 0xE8	; 232
    219a:	d4 f3       	brlt	.-12     	; 0x2190 <__mulsf3_pse+0x84>
    219c:	86 95       	lsr	r24
    219e:	77 95       	ror	r23
    21a0:	67 95       	ror	r22
    21a2:	b7 95       	ror	r27
    21a4:	f7 95       	ror	r31
    21a6:	e7 95       	ror	r30
    21a8:	9f 5f       	subi	r25, 0xFF	; 255
    21aa:	c1 f7       	brne	.-16     	; 0x219c <__mulsf3_pse+0x90>
    21ac:	fe 2b       	or	r31, r30
    21ae:	88 0f       	add	r24, r24
    21b0:	91 1d       	adc	r25, r1
    21b2:	96 95       	lsr	r25
    21b4:	87 95       	ror	r24
    21b6:	97 f9       	bld	r25, 7
    21b8:	08 95       	ret

000021ba <__udivmodsi4>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    21ba:	a1 e2       	ldi	r26, 0x21	; 33
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    21bc:	1a 2e       	mov	r1, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    21be:	aa 1b       	sub	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    21c0:	bb 1b       	sub	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    21c2:	fd 01       	movw	r30, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    21c4:	0d c0       	rjmp	.+26     	; 0x21e0 <__udivmodsi4_ep>

000021c6 <__udivmodsi4_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    21c6:	aa 1f       	adc	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    21c8:	bb 1f       	adc	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    21ca:	ee 1f       	adc	r30, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    21cc:	ff 1f       	adc	r31, r31
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    21ce:	a2 17       	cp	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    21d0:	b3 07       	cpc	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    21d2:	e4 07       	cpc	r30, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    21d4:	f5 07       	cpc	r31, r21
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    21d6:	20 f0       	brcs	.+8      	; 0x21e0 <__udivmodsi4_ep>
__udivmodsi4_loop():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    21d8:	a2 1b       	sub	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    21da:	b3 0b       	sbc	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    21dc:	e4 0b       	sbc	r30, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    21de:	f5 0b       	sbc	r31, r21

000021e0 <__udivmodsi4_ep>:
__udivmodsi4_ep():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    21e0:	66 1f       	adc	r22, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    21e2:	77 1f       	adc	r23, r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    21e4:	88 1f       	adc	r24, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    21e6:	99 1f       	adc	r25, r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    21e8:	1a 94       	dec	r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    21ea:	69 f7       	brne	.-38     	; 0x21c6 <__udivmodsi4_loop>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    21ec:	60 95       	com	r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    21ee:	70 95       	com	r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    21f0:	80 95       	com	r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    21f2:	90 95       	com	r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    21f4:	9b 01       	movw	r18, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    21f6:	ac 01       	movw	r20, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    21f8:	bd 01       	movw	r22, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    21fa:	cf 01       	movw	r24, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    21fc:	08 95       	ret

000021fe <__mulshisi3>:
__mulshisi3():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    21fe:	b7 ff       	sbrs	r27, 7
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    2200:	0c 94 0d 11 	jmp	0x221a	; 0x221a <__muluhisi3>

00002204 <__mulohisi3>:
__mulohisi3():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    2204:	0e 94 0d 11 	call	0x221a	; 0x221a <__muluhisi3>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    2208:	82 1b       	sub	r24, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    220a:	93 0b       	sbc	r25, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    220c:	08 95       	ret

0000220e <__tablejump2__>:
__tablejump2__():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    220e:	ee 0f       	add	r30, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    2210:	ff 1f       	adc	r31, r31
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    2212:	05 90       	lpm	r0, Z+
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    2214:	f4 91       	lpm	r31, Z
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    2216:	e0 2d       	mov	r30, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    2218:	09 94       	ijmp

0000221a <__muluhisi3>:
__muluhisi3():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    221a:	0e 94 18 11 	call	0x2230	; 0x2230 <__umulhisi3>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    221e:	a5 9f       	mul	r26, r21
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    2220:	90 0d       	add	r25, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    2222:	b4 9f       	mul	r27, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    2224:	90 0d       	add	r25, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    2226:	a4 9f       	mul	r26, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    2228:	80 0d       	add	r24, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    222a:	91 1d       	adc	r25, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    222c:	11 24       	eor	r1, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    222e:	08 95       	ret

00002230 <__umulhisi3>:
__umulhisi3():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    2230:	a2 9f       	mul	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    2232:	b0 01       	movw	r22, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    2234:	b3 9f       	mul	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    2236:	c0 01       	movw	r24, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    2238:	a3 9f       	mul	r26, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    223a:	70 0d       	add	r23, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    223c:	81 1d       	adc	r24, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    223e:	11 24       	eor	r1, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    2240:	91 1d       	adc	r25, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    2242:	b2 9f       	mul	r27, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    2244:	70 0d       	add	r23, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    2246:	81 1d       	adc	r24, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    2248:	11 24       	eor	r1, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    224a:	91 1d       	adc	r25, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    224c:	08 95       	ret

0000224e <eeprom_read_byte>:
eeprom_read_byte():
    224e:	f9 99       	sbic	0x1f, 1	; 31
    2250:	fe cf       	rjmp	.-4      	; 0x224e <eeprom_read_byte>
    2252:	92 bd       	out	0x22, r25	; 34
    2254:	81 bd       	out	0x21, r24	; 33
    2256:	f8 9a       	sbi	0x1f, 0	; 31
    2258:	99 27       	eor	r25, r25
    225a:	80 b5       	in	r24, 0x20	; 32
    225c:	08 95       	ret

0000225e <eeprom_write_byte>:
eeprom_write_byte():
    225e:	26 2f       	mov	r18, r22

00002260 <eeprom_write_r18>:
    2260:	f9 99       	sbic	0x1f, 1	; 31
    2262:	fe cf       	rjmp	.-4      	; 0x2260 <eeprom_write_r18>
    2264:	1f ba       	out	0x1f, r1	; 31
    2266:	92 bd       	out	0x22, r25	; 34
    2268:	81 bd       	out	0x21, r24	; 33
    226a:	20 bd       	out	0x20, r18	; 32
    226c:	0f b6       	in	r0, 0x3f	; 63
    226e:	f8 94       	cli
    2270:	fa 9a       	sbi	0x1f, 2	; 31
    2272:	f9 9a       	sbi	0x1f, 1	; 31
    2274:	0f be       	out	0x3f, r0	; 63
    2276:	01 96       	adiw	r24, 0x01	; 1
    2278:	08 95       	ret

0000227a <_exit>:
exit():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    227a:	f8 94       	cli

0000227c <__stop_program>:
__stop_program():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    227c:	ff cf       	rjmp	.-2      	; 0x227c <__stop_program>
